
testIR_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800608c  0800608c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006094  08006094  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800609c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200000b8  08006154  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08006154  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e02  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003504  00000000  00000000  00032eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00037248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d8f  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed8a  00000000  00000000  0004fc77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d15d  00000000  00000000  0005ea01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebb5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000ebbdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f44 	.word	0x08005f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08005f44 	.word	0x08005f44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f96f 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f004 fa00 	bl	80052c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f995 	bl	800121e <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f94f 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000050 	.word	0x20000050
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000004 	.word	0x20000004
 8000f54:	200000e0 	.word	0x200000e0

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200000e0 	.word	0x200000e0

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_Delay+0x40>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db10      	blt.n	8001088 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4909      	ldr	r1, [pc, #36]	; (8001094 <__NVIC_DisableIRQ+0x40>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	3320      	adds	r3, #32
 800107c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001084:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff07 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff1c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff0f 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff1f 	bl	8001054 <__NVIC_DisableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff94 	bl	8001154 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d004      	beq.n	8001254 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e00c      	b.n	800126e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2205      	movs	r2, #5
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e159      	b.n	800154c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	f040 8148 	bne.w	8001546 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x4a>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00b      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001356:	2b11      	cmp	r3, #17
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d130      	bne.n	80013c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a2 	beq.w	8001546 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a55      	ldr	r2, [pc, #340]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_GPIO_Init+0x2e4>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141e:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2ec>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x202>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a47      	ldr	r2, [pc, #284]	; (800156c <HAL_GPIO_Init+0x2f0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x1fe>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a46      	ldr	r2, [pc, #280]	; (8001570 <HAL_GPIO_Init+0x2f4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x1fa>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a45      	ldr	r2, [pc, #276]	; (8001574 <HAL_GPIO_Init+0x2f8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x1f6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x1f2>
 800146a:	2304      	movs	r3, #4
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800146e:	2307      	movs	r3, #7
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x204>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x204>
 800147e:	2300      	movs	r3, #0
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001490:	4934      	ldr	r1, [pc, #208]	; (8001564 <HAL_GPIO_Init+0x2e8>)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_GPIO_Init+0x300>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c2:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_GPIO_Init+0x300>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_GPIO_Init+0x300>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_GPIO_Init+0x300>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_GPIO_Init+0x300>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x300>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_GPIO_Init+0x300>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3301      	adds	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	f67f aea2 	bls.w	8001298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001554:	bf00      	nop
 8001556:	3724      	adds	r7, #36	; 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e22d      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d075      	beq.n	80016ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001602:	4ba3      	ldr	r3, [pc, #652]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b04      	cmp	r3, #4
 800160c:	d00c      	beq.n	8001628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	2b08      	cmp	r3, #8
 8001618:	d112      	bne.n	8001640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4b9d      	ldr	r3, [pc, #628]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001626:	d10b      	bne.n	8001640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	4b99      	ldr	r3, [pc, #612]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d05b      	beq.n	80016ec <HAL_RCC_OscConfig+0x108>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d157      	bne.n	80016ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e208      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0x74>
 800164a:	4b91      	ldr	r3, [pc, #580]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a90      	ldr	r2, [pc, #576]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01d      	b.n	8001694 <HAL_RCC_OscConfig+0xb0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x98>
 8001662:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a8a      	ldr	r2, [pc, #552]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a87      	ldr	r2, [pc, #540]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0xb0>
 800167c:	4b84      	ldr	r3, [pc, #528]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a83      	ldr	r2, [pc, #524]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a80      	ldr	r2, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fc5c 	bl	8000f58 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fc58 	bl	8000f58 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1cd      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b76      	ldr	r3, [pc, #472]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0xc0>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc48 	bl	8000f58 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fc44 	bl	8000f58 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1b9      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	4b6c      	ldr	r3, [pc, #432]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0xe8>
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d063      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fa:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b62      	ldr	r3, [pc, #392]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x152>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e18d      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4952      	ldr	r1, [pc, #328]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	e03a      	b.n	80017c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <HAL_RCC_OscConfig+0x2b0>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fbfd 	bl	8000f58 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fbf9 	bl	8000f58 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e16e      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4940      	ldr	r1, [pc, #256]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_RCC_OscConfig+0x2b0>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fbdc 	bl	8000f58 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fbd8 	bl	8000f58 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e14d      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d030      	beq.n	8001830 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_OscConfig+0x2b4>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fbbc 	bl	8000f58 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fbb8 	bl	8000f58 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e12d      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x200>
 8001802:	e015      	b.n	8001830 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x2b4>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fba5 	bl	8000f58 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fba1 	bl	8000f58 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e116      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a0 	beq.w	800197e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_OscConfig+0x2b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d121      	bne.n	80018be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_RCC_OscConfig+0x2b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_RCC_OscConfig+0x2b8>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb67 	bl	8000f58 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e011      	b.n	80018b2 <HAL_RCC_OscConfig+0x2ce>
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	42470000 	.word	0x42470000
 8001898:	42470e80 	.word	0x42470e80
 800189c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a0:	f7ff fb5a 	bl	8000f58 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0cf      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x478>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2f0>
 80018c6:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	e01c      	b.n	800190e <HAL_RCC_OscConfig+0x32a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d10c      	bne.n	80018f6 <HAL_RCC_OscConfig+0x312>
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a5c      	ldr	r2, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	e00b      	b.n	800190e <HAL_RCC_OscConfig+0x32a>
 80018f6:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6713      	str	r3, [r2, #112]	; 0x70
 8001902:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a56      	ldr	r2, [pc, #344]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fb1f 	bl	8000f58 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb1b 	bl	8000f58 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e08e      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ee      	beq.n	800191e <HAL_RCC_OscConfig+0x33a>
 8001940:	e014      	b.n	800196c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fb09 	bl	8000f58 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff fb05 	bl	8000f58 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e078      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d064      	beq.n	8001a50 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d05c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d141      	bne.n	8001a1e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_RCC_OscConfig+0x480>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fada 	bl	8000f58 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fad6 	bl	8000f58 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04b      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	019b      	lsls	r3, r3, #6
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	3b01      	subs	r3, #1
 80019e0:	041b      	lsls	r3, r3, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	491d      	ldr	r1, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_RCC_OscConfig+0x480>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff faaf 	bl	8000f58 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff faab 	bl	8000f58 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e020      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x41a>
 8001a1c:	e018      	b.n	8001a50 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x480>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fa98 	bl	8000f58 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff fa94 	bl	8000f58 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_OscConfig+0x47c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x448>
 8001a4a:	e001      	b.n	8001a50 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470060 	.word	0x42470060

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0ca      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b6      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494c      	ldr	r1, [pc, #304]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07d      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06d      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e065      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4933      	ldr	r1, [pc, #204]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f9fe 	bl	8000f58 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f9fa 	bl	8000f58 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04d      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e030      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4915      	ldr	r1, [pc, #84]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490d      	ldr	r1, [pc, #52]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f81d 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	fa21 f303 	lsr.w	r3, r1, r3
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff f960 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023c00 	.word	0x40023c00
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08006040 	.word	0x08006040
 8001c28:	20000050 	.word	0x20000050

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c42:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d007      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x32>
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d008      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x38>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 808d 	bne.w	8001d72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c5a:	60bb      	str	r3, [r7, #8]
       break;
 8001c5c:	e08c      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c60:	60bb      	str	r3, [r7, #8]
      break;
 8001c62:	e089      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d023      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	f04f 0400 	mov.w	r4, #0
 8001c84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	ea03 0501 	and.w	r5, r3, r1
 8001c90:	ea04 0602 	and.w	r6, r4, r2
 8001c94:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001c96:	fb02 f106 	mul.w	r1, r2, r6
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	fb02 f205 	mul.w	r2, r2, r5
 8001ca0:	440a      	add	r2, r1
 8001ca2:	493a      	ldr	r1, [pc, #232]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8001ca4:	fba5 0101 	umull	r0, r1, r5, r1
 8001ca8:	1853      	adds	r3, r2, r1
 8001caa:	4619      	mov	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f04f 0400 	mov.w	r4, #0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	f7fe ff69 	bl	8000b8c <__aeabi_uldivmod>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e049      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	ea03 0501 	and.w	r5, r3, r1
 8001cd8:	ea04 0602 	and.w	r6, r4, r2
 8001cdc:	4629      	mov	r1, r5
 8001cde:	4632      	mov	r2, r6
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	0154      	lsls	r4, r2, #5
 8001cea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cee:	014b      	lsls	r3, r1, #5
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	1b49      	subs	r1, r1, r5
 8001cf6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f04f 0400 	mov.w	r4, #0
 8001d02:	0194      	lsls	r4, r2, #6
 8001d04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d08:	018b      	lsls	r3, r1, #6
 8001d0a:	1a5b      	subs	r3, r3, r1
 8001d0c:	eb64 0402 	sbc.w	r4, r4, r2
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	00e2      	lsls	r2, r4, #3
 8001d1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d1e:	00d9      	lsls	r1, r3, #3
 8001d20:	460b      	mov	r3, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	195b      	adds	r3, r3, r5
 8001d26:	eb44 0406 	adc.w	r4, r4, r6
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	02a2      	lsls	r2, r4, #10
 8001d34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d38:	0299      	lsls	r1, r3, #10
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4621      	mov	r1, r4
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f04f 0400 	mov.w	r4, #0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	f7fe ff1e 	bl	8000b8c <__aeabi_uldivmod>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	3301      	adds	r3, #1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	60bb      	str	r3, [r7, #8]
      break;
 8001d70:	e002      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d74:	60bb      	str	r3, [r7, #8]
      break;
 8001d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d78:	68bb      	ldr	r3, [r7, #8]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	017d7840 	.word	0x017d7840

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000050 	.word	0x20000050

08001da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001db0:	4601      	mov	r1, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4a03      	ldr	r2, [pc, #12]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08006050 	.word	0x08006050

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd4:	f7ff ffdc 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4601      	mov	r1, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0b5b      	lsrs	r3, r3, #13
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08006050 	.word	0x08006050

08001df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e01d      	b.n	8001e46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f003 fa78 	bl	8005314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 fb40 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_TIM_Base_DeInit+0x40>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	f240 4344 	movw	r3, #1092	; 0x444
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_TIM_Base_DeInit+0x40>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f003 faa2 	bl	80053d8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e01d      	b.n	8001f44 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d106      	bne.n	8001f22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f815 	bl	8001f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f000 fac1 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa6b 	bl	800247e <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa5d 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa6e 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fa41 	bl	800247e <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa33 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa44 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa17 	bl	800247e <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa09 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa1a 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b10      	cmp	r3, #16
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9ed 	bl	800247e <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9df 	bl	800246a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9f0 	bl	8002492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 fa62 	bl	80035a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fccb 	bl	8002aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f9b5 	bl	80024a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fc95 	bl	8002a92 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002186:	2302      	movs	r3, #2
 8002188:	e0b4      	b.n	80022f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	f200 809f 	bhi.w	80022e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080022e1 	.word	0x080022e1
 80021b0:	080022e1 	.word	0x080022e1
 80021b4:	080022e1 	.word	0x080022e1
 80021b8:	0800221d 	.word	0x0800221d
 80021bc:	080022e1 	.word	0x080022e1
 80021c0:	080022e1 	.word	0x080022e1
 80021c4:	080022e1 	.word	0x080022e1
 80021c8:	0800225f 	.word	0x0800225f
 80021cc:	080022e1 	.word	0x080022e1
 80021d0:	080022e1 	.word	0x080022e1
 80021d4:	080022e1 	.word	0x080022e1
 80021d8:	0800229f 	.word	0x0800229f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f9ea 	bl	80025bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0204 	bic.w	r2, r2, #4
 8002206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6999      	ldr	r1, [r3, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	619a      	str	r2, [r3, #24]
      break;
 800221a:	e062      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fa30 	bl	8002688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
      break;
 800225c:	e041      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fa7b 	bl	8002760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0208 	orr.w	r2, r2, #8
 8002278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0204 	bic.w	r2, r2, #4
 8002288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
      break;
 800229c:	e021      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fac5 	bl	8002834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69d9      	ldr	r1, [r3, #28]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	021a      	lsls	r2, r3, #8
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	61da      	str	r2, [r3, #28]
      break;
 80022de:	e000      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80022e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x18>
 8002310:	2302      	movs	r3, #2
 8002312:	e0a6      	b.n	8002462 <HAL_TIM_ConfigClockSource+0x166>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d067      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x120>
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d80b      	bhi.n	8002368 <HAL_TIM_ConfigClockSource+0x6c>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d073      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
 8002354:	2b10      	cmp	r3, #16
 8002356:	d802      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x62>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d06f      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800235c:	e078      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800235e:	2b20      	cmp	r3, #32
 8002360:	d06c      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
 8002362:	2b30      	cmp	r3, #48	; 0x30
 8002364:	d06a      	beq.n	800243c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002366:	e073      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002368:	2b70      	cmp	r3, #112	; 0x70
 800236a:	d00d      	beq.n	8002388 <HAL_TIM_ConfigClockSource+0x8c>
 800236c:	2b70      	cmp	r3, #112	; 0x70
 800236e:	d804      	bhi.n	800237a <HAL_TIM_ConfigClockSource+0x7e>
 8002370:	2b50      	cmp	r3, #80	; 0x50
 8002372:	d033      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0xe0>
 8002374:	2b60      	cmp	r3, #96	; 0x60
 8002376:	d041      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002378:	e06a      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d066      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x152>
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d017      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002386:	e063      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f000 fb16 	bl	80029c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
      break;
 80023b4:	e04c      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 faff 	bl	80029c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d8:	609a      	str	r2, [r3, #8]
      break;
 80023da:	e039      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f000 fa73 	bl	80028d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2150      	movs	r1, #80	; 0x50
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 facc 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 80023fa:	e029      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	461a      	mov	r2, r3
 800240a:	f000 fa92 	bl	8002932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2160      	movs	r1, #96	; 0x60
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fabc 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800241a:	e019      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f000 fa53 	bl	80028d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	4618      	mov	r0, r3
 8002436:	f000 faac 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800243a:	e009      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 faa3 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800244c:	e000      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800244e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00f      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d00b      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <TIM_Base_SetConfig+0xe8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <TIM_Base_SetConfig+0xec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <TIM_Base_SetConfig+0xf0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01b      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d017      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <TIM_Base_SetConfig+0xe8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <TIM_Base_SetConfig+0xec>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00f      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <TIM_Base_SetConfig+0xf0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <TIM_Base_SetConfig+0xf4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <TIM_Base_SetConfig+0xf8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <TIM_Base_SetConfig+0xfc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	615a      	str	r2, [r3, #20]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40014000 	.word	0x40014000
 80025b4:	40014400 	.word	0x40014400
 80025b8:	40014800 	.word	0x40014800

080025bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <TIM_OC1_SetConfig+0xc8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10c      	bne.n	8002632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f023 0308 	bic.w	r3, r3, #8
 800261e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <TIM_OC1_SetConfig+0xc8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d111      	bne.n	800265e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40010000 	.word	0x40010000

08002688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f023 0210 	bic.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0320 	bic.w	r3, r3, #32
 80026d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <TIM_OC2_SetConfig+0xd4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10d      	bne.n	8002704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <TIM_OC2_SetConfig+0xd4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d113      	bne.n	8002734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800271a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000

08002760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10d      	bne.n	80027da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d113      	bne.n	800280a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40010000 	.word	0x40010000

08002834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800287e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <TIM_OC4_SetConfig+0x9c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d109      	bne.n	80028a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40010000 	.word	0x40010000

080028d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 030a 	bic.w	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b087      	sub	sp, #28
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f043 0307 	orr.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e032      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e03f      	b.n	8002b4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f002 fc93 	bl	800540c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2224      	movs	r2, #36	; 0x24
 8002aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fb48 	bl	8003194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	f040 8083 	bne.w	8002c7c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_Transmit+0x2e>
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07b      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_UART_Transmit+0x40>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e074      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002baa:	f7fe f9d5 	bl	8000f58 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	d122      	bne.n	8002c1c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f96b 	bl	8002ebc <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e046      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c02:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	e017      	b.n	8002c44 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	e013      	b.n	8002c44 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f948 	bl	8002ebc <UART_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e023      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1b7      	bne.n	8002bbe <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f92f 	bl	8002ebc <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e00a      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_UART_IRQHandler+0x52>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9dc 	bl	8003090 <UART_Receive_IT>
      return;
 8002cd8:	e0cc      	b.n	8002e74 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ab 	beq.w	8002e38 <HAL_UART_IRQHandler+0x1b0>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x70>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80a0 	beq.w	8002e38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_UART_IRQHandler+0x90>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_UART_IRQHandler+0xb0>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	f043 0202 	orr.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_UART_IRQHandler+0xd0>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_UART_IRQHandler+0xf0>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	f043 0208 	orr.w	r2, r3, #8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d078      	beq.n	8002e72 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <HAL_UART_IRQHandler+0x112>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f97b 	bl	8003090 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x13a>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d031      	beq.n	8002e26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8c4 	bl	8002f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d123      	bne.n	8002e1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d013      	beq.n	8002e16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_UART_IRQHandler+0x1f4>)
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fa1b 	bl	8001236 <HAL_DMA_Abort_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e10:	4610      	mov	r0, r2
 8002e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e00e      	b.n	8002e34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f846 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	e00a      	b.n	8002e34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f842 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e006      	b.n	8002e34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f83e 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e32:	e01e      	b.n	8002e72 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	bf00      	nop
    return;
 8002e36:	e01c      	b.n	8002e72 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_UART_IRQHandler+0x1cc>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8b1 	bl	8002fb4 <UART_Transmit_IT>
    return;
 8002e52:	e00f      	b.n	8002e74 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_UART_IRQHandler+0x1ec>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f8f9 	bl	8003060 <UART_EndTransmit_IT>
    return;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002e72:	bf00      	nop
  }
}
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08002f8d 	.word	0x08002f8d

08002e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ecc:	e02c      	b.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d028      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <UART_WaitOnFlagUntilTimeout+0x30>
 8002edc:	f7fe f83c 	bl	8000f58 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d21d      	bcs.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002efa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e00f      	b.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d0c3      	beq.n	8002ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ff7e 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b21      	cmp	r3, #33	; 0x21
 8002fc6:	d144      	bne.n	8003052 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d11a      	bne.n	8003008 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	621a      	str	r2, [r3, #32]
 8002ffa:	e00e      	b.n	800301a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]
 8003006:	e008      	b.n	800301a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	1c59      	adds	r1, r3, #1
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6211      	str	r1, [r2, #32]
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29b      	uxth	r3, r3
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4619      	mov	r1, r3
 8003028:	84d1      	strh	r1, [r2, #38]	; 0x26
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fefd 	bl	8002e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b22      	cmp	r3, #34	; 0x22
 80030a2:	d171      	bne.n	8003188 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d123      	bne.n	80030f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10e      	bne.n	80030da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
 80030d8:	e029      	b.n	800312e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
 80030f4:	e01b      	b.n	800312e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6858      	ldr	r0, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	1c59      	adds	r1, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6291      	str	r1, [r2, #40]	; 0x28
 800310e:	b2c2      	uxtb	r2, r0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e00c      	b.n	800312e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	1c58      	adds	r0, r3, #1
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	6288      	str	r0, [r1, #40]	; 0x28
 8003126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4619      	mov	r1, r3
 800313c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800313e:	2b00      	cmp	r3, #0
 8003140:	d120      	bne.n	8003184 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0220 	bic.w	r2, r2, #32
 8003150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fe8a 	bl	8002e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e002      	b.n	800318a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80031d4:	f023 030c 	bic.w	r3, r3, #12
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	f040 80e4 	bne.w	80033cc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4aab      	ldr	r2, [pc, #684]	; (80034b8 <UART_SetConfig+0x324>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <UART_SetConfig+0x84>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4aaa      	ldr	r2, [pc, #680]	; (80034bc <UART_SetConfig+0x328>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d16c      	bne.n	80032f2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003218:	f7fe fdda 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 800321c:	4602      	mov	r2, r0
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009a      	lsls	r2, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4aa3      	ldr	r2, [pc, #652]	; (80034c0 <UART_SetConfig+0x32c>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	011c      	lsls	r4, r3, #4
 800323c:	f7fe fdc8 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8003240:	4602      	mov	r2, r0
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fbb2 f5f3 	udiv	r5, r2, r3
 8003256:	f7fe fdbb 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 800325a:	4602      	mov	r2, r0
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	4a93      	ldr	r2, [pc, #588]	; (80034c0 <UART_SetConfig+0x32c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2264      	movs	r2, #100	; 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	1aeb      	subs	r3, r5, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	3332      	adds	r3, #50	; 0x32
 8003284:	4a8e      	ldr	r2, [pc, #568]	; (80034c0 <UART_SetConfig+0x32c>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003292:	441c      	add	r4, r3
 8003294:	f7fe fd9c 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8003298:	4602      	mov	r2, r0
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80032ae:	f7fe fd8f 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <UART_SetConfig+0x32c>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2264      	movs	r2, #100	; 0x64
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	1aeb      	subs	r3, r5, r3
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	3332      	adds	r3, #50	; 0x32
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <UART_SetConfig+0x32c>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	f003 0207 	and.w	r2, r3, #7
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4422      	add	r2, r4
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e154      	b.n	800359c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032f2:	f7fe fd59 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	4a6c      	ldr	r2, [pc, #432]	; (80034c0 <UART_SetConfig+0x32c>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	011c      	lsls	r4, r3, #4
 8003316:	f7fe fd47 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 800331a:	4602      	mov	r2, r0
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009a      	lsls	r2, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003330:	f7fe fd3a 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8003334:	4602      	mov	r2, r0
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <UART_SetConfig+0x32c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	2264      	movs	r2, #100	; 0x64
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	1aeb      	subs	r3, r5, r3
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	3332      	adds	r3, #50	; 0x32
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <UART_SetConfig+0x32c>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800336c:	441c      	add	r4, r3
 800336e:	f7fe fd1b 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8003372:	4602      	mov	r2, r0
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009a      	lsls	r2, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb2 f5f3 	udiv	r5, r2, r3
 8003388:	f7fe fd0e 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 800338c:	4602      	mov	r2, r0
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	4a47      	ldr	r2, [pc, #284]	; (80034c0 <UART_SetConfig+0x32c>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2264      	movs	r2, #100	; 0x64
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	1aeb      	subs	r3, r5, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <UART_SetConfig+0x32c>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4422      	add	r2, r4
 80033c8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80033ca:	e0e7      	b.n	800359c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a39      	ldr	r2, [pc, #228]	; (80034b8 <UART_SetConfig+0x324>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <UART_SetConfig+0x24c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a38      	ldr	r2, [pc, #224]	; (80034bc <UART_SetConfig+0x328>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d171      	bne.n	80034c4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033e0:	f7fe fcf6 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <UART_SetConfig+0x32c>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	011c      	lsls	r4, r3, #4
 8003404:	f7fe fce4 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8003408:	4602      	mov	r2, r0
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	fbb2 f5f3 	udiv	r5, r2, r3
 800341e:	f7fe fcd7 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8003422:	4602      	mov	r2, r0
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <UART_SetConfig+0x32c>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2264      	movs	r2, #100	; 0x64
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	1aeb      	subs	r3, r5, r3
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	3332      	adds	r3, #50	; 0x32
 800344c:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <UART_SetConfig+0x32c>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003458:	441c      	add	r4, r3
 800345a:	f7fe fcb9 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 800345e:	4602      	mov	r2, r0
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009a      	lsls	r2, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fbb2 f5f3 	udiv	r5, r2, r3
 8003474:	f7fe fcac 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8003478:	4602      	mov	r2, r0
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <UART_SetConfig+0x32c>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2264      	movs	r2, #100	; 0x64
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	1aeb      	subs	r3, r5, r3
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	3332      	adds	r3, #50	; 0x32
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <UART_SetConfig+0x32c>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4422      	add	r2, r4
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	e071      	b.n	800359c <UART_SetConfig+0x408>
 80034b8:	40011000 	.word	0x40011000
 80034bc:	40011400 	.word	0x40011400
 80034c0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034c4:	f7fe fc70 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	009a      	lsls	r2, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <UART_SetConfig+0x410>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	011c      	lsls	r4, r3, #4
 80034e8:	f7fe fc5e 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009a      	lsls	r2, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8003502:	f7fe fc51 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8003506:	4602      	mov	r2, r0
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <UART_SetConfig+0x410>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	; 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1aeb      	subs	r3, r5, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	4a1c      	ldr	r2, [pc, #112]	; (80035a4 <UART_SetConfig+0x410>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	441c      	add	r4, r3
 800353e:	f7fe fc33 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8003542:	4602      	mov	r2, r0
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fbb2 f5f3 	udiv	r5, r2, r3
 8003558:	f7fe fc26 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 800355c:	4602      	mov	r2, r0
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <UART_SetConfig+0x410>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2264      	movs	r2, #100	; 0x64
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	1aeb      	subs	r3, r5, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <UART_SetConfig+0x410>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 020f 	and.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4422      	add	r2, r4
 8003598:	609a      	str	r2, [r3, #8]
}
 800359a:	e7ff      	b.n	800359c <UART_SetConfig+0x408>
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}
 80035a4:	51eb851f 	.word	0x51eb851f

080035a8 <HAL_TIM_PeriodElapsedCallback>:

#include "IRremote.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a54      	ldr	r2, [pc, #336]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	f040 80a0 	bne.w	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
	{
		uint8_t irdata = RECIV_PIN; // пин для приёма
 80035ba:	2101      	movs	r1, #1
 80035bc:	4852      	ldr	r0, [pc, #328]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80035be:	f7fd ffdf 	bl	8001580 <HAL_GPIO_ReadPin>
 80035c2:	4603      	mov	r3, r0
 80035c4:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 80035c6:	4b51      	ldr	r3, [pc, #324]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80035d2:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80035d6:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 80035d8:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b02      	subs	r3, #2
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	f200 808a 	bhi.w	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	08003601 	.word	0x08003601
 80035f0:	08003655 	.word	0x08003655
 80035f4:	08003689 	.word	0x08003689
 80035f8:	080036cf 	.word	0x080036cf
 80035fc:	080036dd 	.word	0x080036dd
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d172      	bne.n	80036ec <HAL_TIM_PeriodElapsedCallback+0x144>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003608:	885b      	ldrh	r3, [r3, #2]
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b63      	cmp	r3, #99	; 0x63
 800360e:	d803      	bhi.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x70>
					{
						irparams.timer = 0;
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003612:	2200      	movs	r2, #0
 8003614:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8003616:	e069      	b.n	80036ec <HAL_TIM_PeriodElapsedCallback+0x144>
						irparams.overflow = false;
 8003618:	4b3c      	ldr	r3, [pc, #240]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003622:	2200      	movs	r2, #0
 8003624:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	b2d1      	uxtb	r1, r2
 8003630:	4a36      	ldr	r2, [pc, #216]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003632:	7051      	strb	r1, [r2, #1]
 8003634:	4618      	mov	r0, r3
 8003636:	4b35      	ldr	r3, [pc, #212]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003638:	885b      	ldrh	r3, [r3, #2]
 800363a:	b299      	uxth	r1, r3
 800363c:	4a33      	ldr	r2, [pc, #204]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800363e:	0043      	lsls	r3, r0, #1
 8003640:	4413      	add	r3, r2
 8003642:	460a      	mov	r2, r1
 8003644:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003648:	2200      	movs	r2, #0
 800364a:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800364e:	2203      	movs	r2, #3
 8003650:	701a      	strb	r2, [r3, #0]
			break;
 8003652:	e04b      	b.n	80036ec <HAL_TIM_PeriodElapsedCallback+0x144>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d14a      	bne.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	b2d1      	uxtb	r1, r2
 8003664:	4a29      	ldr	r2, [pc, #164]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003666:	7051      	strb	r1, [r2, #1]
 8003668:	4618      	mov	r0, r3
 800366a:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800366c:	885b      	ldrh	r3, [r3, #2]
 800366e:	b299      	uxth	r1, r3
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003672:	0043      	lsls	r3, r0, #1
 8003674:	4413      	add	r3, r2
 8003676:	460a      	mov	r2, r1
 8003678:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800367c:	2200      	movs	r2, #0
 800367e:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
				}

			break;
 8003686:	e033      	b.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0x148>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	b2d1      	uxtb	r1, r2
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800369a:	7051      	strb	r1, [r2, #1]
 800369c:	4618      	mov	r0, r3
 800369e:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036a0:	885b      	ldrh	r3, [r3, #2]
 80036a2:	b299      	uxth	r1, r3
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036a6:	0043      	lsls	r3, r0, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	460a      	mov	r2, r1
 80036ac:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036b6:	2203      	movs	r2, #3
 80036b8:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 80036ba:	e01b      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x14c>
				else if(irparams.timer > GAP_TICKS) // Space
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036be:	885b      	ldrh	r3, [r3, #2]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d916      	bls.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x14c>
					irparams.rcvstate = STATE_STOP;
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036c8:	2205      	movs	r2, #5
 80036ca:	701a      	strb	r2, [r3, #0]
			break;
 80036cc:	e012      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <HAL_TIM_PeriodElapsedCallback+0x150>
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	805a      	strh	r2, [r3, #2]
			break;
 80036da:	e00d      	b.n	80036f8 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036e6:	2205      	movs	r2, #5
 80036e8:	701a      	strb	r2, [r3, #0]
			break;
 80036ea:	e006      	b.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 80036f8:	bf00      	nop
		}
	}
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000300 	.word	0x20000300
 8003708:	40020000 	.word	0x40020000
 800370c:	200000e4 	.word	0x200000e4

08003710 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f7fc ff0a 	bl	8000534 <__aeabi_i2d>
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <MATCH+0x98>)
 8003726:	f7fc ff6f 	bl	8000608 <__aeabi_dmul>
 800372a:	4603      	mov	r3, r0
 800372c:	460c      	mov	r4, r1
 800372e:	4618      	mov	r0, r3
 8003730:	4621      	mov	r1, r4
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <MATCH+0x9c>)
 8003738:	f7fd f890 	bl	800085c <__aeabi_ddiv>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	4618      	mov	r0, r3
 8003742:	4621      	mov	r1, r4
 8003744:	f7fd f9fa 	bl	8000b3c <__aeabi_d2iz>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4293      	cmp	r3, r2
 800374e:	db25      	blt.n	800379c <MATCH+0x8c>
 8003750:	6838      	ldr	r0, [r7, #0]
 8003752:	f7fc feef 	bl	8000534 <__aeabi_i2d>
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <MATCH+0xa0>)
 800375c:	f7fc ff54 	bl	8000608 <__aeabi_dmul>
 8003760:	4603      	mov	r3, r0
 8003762:	460c      	mov	r4, r1
 8003764:	4618      	mov	r0, r3
 8003766:	4621      	mov	r1, r4
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MATCH+0x9c>)
 800376e:	f7fd f875 	bl	800085c <__aeabi_ddiv>
 8003772:	4603      	mov	r3, r0
 8003774:	460c      	mov	r4, r1
 8003776:	4618      	mov	r0, r3
 8003778:	4621      	mov	r1, r4
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <MATCH+0xa4>)
 8003780:	f7fc fd8c 	bl	800029c <__adddf3>
 8003784:	4603      	mov	r3, r0
 8003786:	460c      	mov	r4, r1
 8003788:	4618      	mov	r0, r3
 800378a:	4621      	mov	r1, r4
 800378c:	f7fd f9d6 	bl	8000b3c <__aeabi_d2iz>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4293      	cmp	r3, r2
 8003796:	dc01      	bgt.n	800379c <MATCH+0x8c>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <MATCH+0x8e>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	3fe80000 	.word	0x3fe80000
 80037ac:	40490000 	.word	0x40490000
 80037b0:	3ff40000 	.word	0x3ff40000
 80037b4:	3ff00000 	.word	0x3ff00000

080037b8 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	3364      	adds	r3, #100	; 0x64
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc feb4 	bl	8000534 <__aeabi_i2d>
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <MATCH_MARK+0xa0>)
 80037d2:	f7fc ff19 	bl	8000608 <__aeabi_dmul>
 80037d6:	4603      	mov	r3, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	4618      	mov	r0, r3
 80037dc:	4621      	mov	r1, r4
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <MATCH_MARK+0xa4>)
 80037e4:	f7fd f83a 	bl	800085c <__aeabi_ddiv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	4618      	mov	r0, r3
 80037ee:	4621      	mov	r1, r4
 80037f0:	f7fd f9a4 	bl	8000b3c <__aeabi_d2iz>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	db27      	blt.n	800384c <MATCH_MARK+0x94>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	3364      	adds	r3, #100	; 0x64
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fe97 	bl	8000534 <__aeabi_i2d>
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MATCH_MARK+0xa8>)
 800380c:	f7fc fefc 	bl	8000608 <__aeabi_dmul>
 8003810:	4603      	mov	r3, r0
 8003812:	460c      	mov	r4, r1
 8003814:	4618      	mov	r0, r3
 8003816:	4621      	mov	r1, r4
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <MATCH_MARK+0xa4>)
 800381e:	f7fd f81d 	bl	800085c <__aeabi_ddiv>
 8003822:	4603      	mov	r3, r0
 8003824:	460c      	mov	r4, r1
 8003826:	4618      	mov	r0, r3
 8003828:	4621      	mov	r1, r4
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <MATCH_MARK+0xac>)
 8003830:	f7fc fd34 	bl	800029c <__adddf3>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4618      	mov	r0, r3
 800383a:	4621      	mov	r1, r4
 800383c:	f7fd f97e 	bl	8000b3c <__aeabi_d2iz>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4293      	cmp	r3, r2
 8003846:	dc01      	bgt.n	800384c <MATCH_MARK+0x94>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <MATCH_MARK+0x96>
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bd90      	pop	{r4, r7, pc}
 8003856:	bf00      	nop
 8003858:	3fe80000 	.word	0x3fe80000
 800385c:	40490000 	.word	0x40490000
 8003860:	3ff40000 	.word	0x3ff40000
 8003864:	3ff00000 	.word	0x3ff00000

08003868 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	3b64      	subs	r3, #100	; 0x64
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fe5c 	bl	8000534 <__aeabi_i2d>
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <MATCH_SPACE+0xa0>)
 8003882:	f7fc fec1 	bl	8000608 <__aeabi_dmul>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	4618      	mov	r0, r3
 800388c:	4621      	mov	r1, r4
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <MATCH_SPACE+0xa4>)
 8003894:	f7fc ffe2 	bl	800085c <__aeabi_ddiv>
 8003898:	4603      	mov	r3, r0
 800389a:	460c      	mov	r4, r1
 800389c:	4618      	mov	r0, r3
 800389e:	4621      	mov	r1, r4
 80038a0:	f7fd f94c 	bl	8000b3c <__aeabi_d2iz>
 80038a4:	4602      	mov	r2, r0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	db27      	blt.n	80038fc <MATCH_SPACE+0x94>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3b64      	subs	r3, #100	; 0x64
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fc fe3f 	bl	8000534 <__aeabi_i2d>
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <MATCH_SPACE+0xa8>)
 80038bc:	f7fc fea4 	bl	8000608 <__aeabi_dmul>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4618      	mov	r0, r3
 80038c6:	4621      	mov	r1, r4
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <MATCH_SPACE+0xa4>)
 80038ce:	f7fc ffc5 	bl	800085c <__aeabi_ddiv>
 80038d2:	4603      	mov	r3, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	4618      	mov	r0, r3
 80038d8:	4621      	mov	r1, r4
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <MATCH_SPACE+0xac>)
 80038e0:	f7fc fcdc 	bl	800029c <__adddf3>
 80038e4:	4603      	mov	r3, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	4618      	mov	r0, r3
 80038ea:	4621      	mov	r1, r4
 80038ec:	f7fd f926 	bl	8000b3c <__aeabi_d2iz>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	dc01      	bgt.n	80038fc <MATCH_SPACE+0x94>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <MATCH_SPACE+0x96>
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}
 8003906:	bf00      	nop
 8003908:	3fe80000 	.word	0x3fe80000
 800390c:	40490000 	.word	0x40490000
 8003910:	3ff40000 	.word	0x3ff40000
 8003914:	3ff00000 	.word	0x3ff00000

08003918 <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <my_decode+0x124>)
 8003924:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 8003926:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <my_decode+0x128>)
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	b21a      	sxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 8003932:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <my_decode+0x128>)
 8003934:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8003938:	b2db      	uxtb	r3, r3
 800393a:	b21a      	sxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <my_decode+0x128>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b05      	cmp	r3, #5
 8003948:	d001      	beq.n	800394e <my_decode+0x36>
 800394a:	2300      	movs	r3, #0
 800394c:	e072      	b.n	8003a34 <my_decode+0x11c>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fcac 	bl	80042ac <decodeNEC>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <my_decode+0x46>
 800395a:	2301      	movs	r3, #1
 800395c:	e06a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 f936 	bl	8004bd0 <decodeSony>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <my_decode+0x56>
 800396a:	2301      	movs	r3, #1
 800396c:	e062      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_SANYO
		if(decodeSanyo(results)) return true;
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f001 f87a 	bl	8004a68 <decodeSanyo>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <my_decode+0x66>
 800397a:	2301      	movs	r3, #1
 800397c:	e05a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fc06 	bl	8004190 <decodeMitsubishi>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <my_decode+0x76>
 800398a:	2301      	movs	r3, #1
 800398c:	e052      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fe64 	bl	800465c <decodeRC5>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <my_decode+0x86>
 800399a:	2301      	movs	r3, #1
 800399c:	e04a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fee2 	bl	8004768 <decodeRC6>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <my_decode+0x96>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e042      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fd3e 	bl	8004430 <decodePanasonic>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <my_decode+0xa6>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e03a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fb46 	bl	8004050 <decodeLG>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <my_decode+0xb6>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e032      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa6a 	bl	8003ea8 <decodeJVC>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <my_decode+0xc6>
 80039da:	2301      	movs	r3, #1
 80039dc:	e02a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 ff82 	bl	80048e8 <decodeSAMSUNG>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <my_decode+0xd6>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e022      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_WHYNTER
		if(decodeWhynter(results)) return true;
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 f990 	bl	8004d14 <decodeWhynter>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <my_decode+0xe6>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e01a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_AIWA_RC_T501
		if(decodeAiwaRCT501(results)) return true;
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f926 	bl	8003c50 <decodeAiwaRCT501>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <my_decode+0xf6>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e012      	b.n	8003a34 <my_decode+0x11c>
	#endif

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9bc 	bl	8003d8c <decodeDenon>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <my_decode+0x106>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00a      	b.n	8003a34 <my_decode+0x11c>
	#endif

	if(decodeHash(results)) return true;
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8ae 	bl	8003b80 <decodeHash>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <my_decode+0x116>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e002      	b.n	8003a34 <my_decode+0x11c>
	my_resume();
 8003a2e:	f000 f857 	bl	8003ae0 <my_resume>
	return false;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200000e8 	.word	0x200000e8
 8003a40:	200000e4 	.word	0x200000e4

08003a44 <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
	DWT_Init(); // старт счётчика микросекунд
 8003a4a:	f000 f8e9 	bl	8003c20 <DWT_Init>

	HAL_TIM_Base_DeInit(&htim4);
 8003a4e:	4821      	ldr	r0, [pc, #132]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a50:	f7fe f9fd 	bl	8001e4e <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a62:	463b      	mov	r3, r7
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <my_enableIRIn+0x94>)
 8003a6e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = MYPRESCALER;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a72:	2253      	movs	r2, #83	; 0x53
 8003a74:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = MYPERIOD;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a7e:	2231      	movs	r2, #49	; 0x31
 8003a80:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8003a8e:	4811      	ldr	r0, [pc, #68]	; (8003ad4 <my_enableIRIn+0x90>)
 8003a90:	f7fe f9b2 	bl	8001df8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a98:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <my_enableIRIn+0x90>)
 8003aa2:	f7fe fc2b 	bl	80022fc <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4808      	ldr	r0, [pc, #32]	; (8003ad4 <my_enableIRIn+0x90>)
 8003ab4:	f7fe ffa8 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <my_enableIRIn+0x98>)
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <my_enableIRIn+0x98>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&htim4);
 8003ac4:	4803      	ldr	r0, [pc, #12]	; (8003ad4 <my_enableIRIn+0x90>)
 8003ac6:	f7fe f9f2 	bl	8001eae <HAL_TIM_Base_Start_IT>
}
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000300 	.word	0x20000300
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	200000e4 	.word	0x200000e4

08003ae0 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <my_resume+0x1c>)
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <my_resume+0x1c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	200000e4 	.word	0x200000e4

08003b00 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 8003b0a:	6838      	ldr	r0, [r7, #0]
 8003b0c:	f7fc fd02 	bl	8000514 <__aeabi_ui2d>
 8003b10:	4604      	mov	r4, r0
 8003b12:	460d      	mov	r5, r1
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fc fcfd 	bl	8000514 <__aeabi_ui2d>
 8003b1a:	a317      	add	r3, pc, #92	; (adr r3, 8003b78 <compare+0x78>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fd72 	bl	8000608 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7fc ffde 	bl	8000aec <__aeabi_dcmplt>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <compare+0x3a>
 8003b36:	2300      	movs	r3, #0
 8003b38:	e018      	b.n	8003b6c <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fc fcea 	bl	8000514 <__aeabi_ui2d>
 8003b40:	4604      	mov	r4, r0
 8003b42:	460d      	mov	r5, r1
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7fc fce5 	bl	8000514 <__aeabi_ui2d>
 8003b4a:	a30b      	add	r3, pc, #44	; (adr r3, 8003b78 <compare+0x78>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f7fc fd5a 	bl	8000608 <__aeabi_dmul>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc ffc6 	bl	8000aec <__aeabi_dcmplt>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <compare+0x6a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e000      	b.n	8003b6c <compare+0x6c>
	else return 1;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bdb0      	pop	{r4, r5, r7, pc}
 8003b74:	f3af 8000 	nop.w
 8003b78:	9999999a 	.word	0x9999999a
 8003b7c:	3fe99999 	.word	0x3fe99999

08003b80 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <decodeHash+0x98>)
 8003b8a:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	dc01      	bgt.n	8003b9a <decodeHash+0x1a>
 8003b96:	2300      	movs	r3, #0
 8003b98:	e039      	b.n	8003c0e <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	817b      	strh	r3, [r7, #10]
 8003b9e:	e024      	b.n	8003bea <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7ff ff9b 	bl	8003b00 <compare>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <decodeHash+0x9c>)
 8003bd2:	fb02 f203 	mul.w	r2, r2, r3
 8003bd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003bda:	4053      	eors	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8003bde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	817b      	strh	r3, [r7, #10]
 8003bea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bee:	3302      	adds	r3, #2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	dbd2      	blt.n	8003ba0 <decodeHash+0x20>
	}

	results->value = hash;
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
	return true;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	811c9dc5 	.word	0x811c9dc5
 8003c1c:	01000193 	.word	0x01000193

08003c20 <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC


void DWT_Init()
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8003c24:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <DWT_Init+0x28>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <DWT_Init+0x28>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <DWT_Init+0x2c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <DWT_Init+0x2c>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000edfc 	.word	0xe000edfc
 8003c4c:	e0001000 	.word	0xe0001000

08003c50 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	int  data   = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
	int  offset = 1;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8003c60:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <decodeAiwaRCT501+0x138>)
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b57      	cmp	r3, #87	; 0x57
 8003c68:	d801      	bhi.n	8003c6e <decodeAiwaRCT501+0x1e>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e087      	b.n	8003d7e <decodeAiwaRCT501+0x12e>

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f242 2160 	movw	r1, #8800	; 0x2260
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fd97 	bl	80037b8 <MATCH_MARK>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <decodeAiwaRCT501+0x44>
 8003c90:	2300      	movs	r3, #0
 8003c92:	e074      	b.n	8003d7e <decodeAiwaRCT501+0x12e>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f241 1194 	movw	r1, #4500	; 0x1194
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fddc 	bl	8003868 <MATCH_SPACE>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <decodeAiwaRCT501+0x6a>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e061      	b.n	8003d7e <decodeAiwaRCT501+0x12e>

	offset += 26;  // skip pre-data - optional
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	331a      	adds	r3, #26
 8003cbe:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8003cc0:	e03e      	b.n	8003d40 <decodeAiwaRCT501+0xf0>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd6f 	bl	80037b8 <MATCH_MARK>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <decodeAiwaRCT501+0xb6>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fdb5 	bl	8003868 <MATCH_SPACE>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <decodeAiwaRCT501+0xc6>
 8003d04:	e001      	b.n	8003d0a <decodeAiwaRCT501+0xba>
		else                                                             return false ;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e039      	b.n	8003d7e <decodeAiwaRCT501+0x12e>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e011      	b.n	8003d3a <decodeAiwaRCT501+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fd9d 	bl	8003868 <MATCH_SPACE>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <decodeAiwaRCT501+0x100>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
		else                                                                     break ;  // End of one & zero detected
		offset++;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <decodeAiwaRCT501+0x138>)
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	3b04      	subs	r3, #4
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	dbb9      	blt.n	8003cc2 <decodeAiwaRCT501+0x72>
 8003d4e:	e000      	b.n	8003d52 <decodeAiwaRCT501+0x102>
		else                                                                     break ;  // End of one & zero detected
 8003d50:	bf00      	nop
	}

	results->bits = (offset - 1) / 2;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	0fda      	lsrs	r2, r3, #31
 8003d58:	4413      	add	r3, r2
 8003d5a:	105b      	asrs	r3, r3, #1
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	811a      	strh	r2, [r3, #8]
	if (results->bits < 42)  return false ;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d68:	2b29      	cmp	r3, #41	; 0x29
 8003d6a:	dc01      	bgt.n	8003d70 <decodeAiwaRCT501+0x120>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e006      	b.n	8003d7e <decodeAiwaRCT501+0x12e>

	results->value       = data;
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]
	results->decode_type = AIWA_RC_T501;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2209      	movs	r2, #9
 8003d7a:	701a      	strb	r2, [r3, #0]
	return true;
 8003d7c:	2301      	movs	r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200000e4 	.word	0x200000e4

08003d8c <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	unsigned long data   = 0;  // Somewhere to build our code
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
	int offset = 1;  // Skip the Gap reading
 8003d98:	2301      	movs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8003d9c:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <decodeDenon+0x118>)
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d001      	beq.n	8003daa <decodeDenon+0x1e>
 8003da6:	2300      	movs	r3, #0
 8003da8:	e078      	b.n	8003e9c <decodeDenon+0x110>

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1c59      	adds	r1, r3, #1
 8003db2:	6139      	str	r1, [r7, #16]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fcf9 	bl	80037b8 <MATCH_MARK>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <decodeDenon+0x44>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e065      	b.n	8003e9c <decodeDenon+0x110>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	6139      	str	r1, [r7, #16]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fd3e 	bl	8003868 <MATCH_SPACE>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <decodeDenon+0x6a>
 8003df2:	2300      	movs	r3, #0
 8003df4:	e052      	b.n	8003e9c <decodeDenon+0x110>

	// Read the bits in
	for(int i = 0; i < BITS; i++) 
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e042      	b.n	8003e82 <decodeDenon+0xf6>
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	6139      	str	r1, [r7, #16]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fcd0 	bl	80037b8 <MATCH_MARK>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <decodeDenon+0x96>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e03c      	b.n	8003e9c <decodeDenon+0x110>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fd17 	bl	8003868 <MATCH_SPACE>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <decodeDenon+0xc0>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e014      	b.n	8003e76 <decodeDenon+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f240 21ee 	movw	r1, #750	; 0x2ee
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fd02 	bl	8003868 <MATCH_SPACE>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <decodeDenon+0xe6>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e001      	b.n	8003e76 <decodeDenon+0xea>
		else return false;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e012      	b.n	8003e9c <decodeDenon+0x110>
		offset++;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < BITS; i++) 
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b0d      	cmp	r3, #13
 8003e86:	ddb9      	ble.n	8003dfc <decodeDenon+0x70>
	}

	// Success
	results->bits = BITS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	220e      	movs	r2, #14
 8003e8c:	811a      	strh	r2, [r3, #8]
	results->value = data;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	605a      	str	r2, [r3, #4]
	results->decode_type = DENON;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	220f      	movs	r2, #15
 8003e98:	701a      	strb	r2, [r3, #0]
	return true;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200000e4 	.word	0x200000e4

08003ea8 <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	long data   = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <decodeJVC+0x1a4>)
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	; 0x22
 8003ec0:	d12e      	bne.n	8003f20 <decodeJVC+0x78>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fc6f 	bl	80037b8 <MATCH_MARK>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01f      	beq.n	8003f20 <decodeJVC+0x78>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <decodeJVC+0x1a4>)
 8003ee6:	785b      	ldrb	r3, [r3, #1]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fc5b 	bl	80037b8 <MATCH_MARK>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <decodeJVC+0x78>
	{
		results->bits = 0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2206      	movs	r2, #6
 8003f1a:	701a      	strb	r2, [r3, #0]
		return true;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e090      	b.n	8004042 <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	6139      	str	r1, [r7, #16]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fc3e 	bl	80037b8 <MATCH_MARK>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <decodeJVC+0x9e>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e07d      	b.n	8004042 <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 8003f46:	4b41      	ldr	r3, [pc, #260]	; (800404c <decodeJVC+0x1a4>)
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d801      	bhi.n	8003f54 <decodeJVC+0xac>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e076      	b.n	8004042 <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	6139      	str	r1, [r7, #16]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fc7c 	bl	8003868 <MATCH_SPACE>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <decodeJVC+0xd2>
 8003f76:	2300      	movs	r3, #0
 8003f78:	e063      	b.n	8004042 <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++) 
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e042      	b.n	8004006 <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1c59      	adds	r1, r3, #1
 8003f88:	6139      	str	r1, [r7, #16]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc0e 	bl	80037b8 <MATCH_MARK>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <decodeJVC+0xfe>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e04d      	b.n	8004042 <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fc55 	bl	8003868 <MATCH_SPACE>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <decodeJVC+0x128>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e014      	b.n	8003ffa <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f240 2126 	movw	r1, #550	; 0x226
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fc40 	bl	8003868 <MATCH_SPACE>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <decodeJVC+0x14e>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e001      	b.n	8003ffa <decodeJVC+0x152>
		else return false ;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e023      	b.n	8004042 <decodeJVC+0x19a>
		offset++;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++) 
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	ddb9      	ble.n	8003f80 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fbca 	bl	80037b8 <MATCH_MARK>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <decodeJVC+0x186>
 800402a:	2300      	movs	r3, #0
 800402c:	e009      	b.n	8004042 <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2206      	movs	r2, #6
 800403e:	701a      	strb	r2, [r3, #0]

	return true;
 8004040:	2301      	movs	r3, #1
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200000e4 	.word	0x200000e4

08004050 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 800405c:	2301      	movs	r3, #1
 800405e:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8004060:	4b4a      	ldr	r3, [pc, #296]	; (800418c <decodeLG+0x13c>)
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b38      	cmp	r3, #56	; 0x38
 8004068:	d801      	bhi.n	800406e <decodeLG+0x1e>
 800406a:	2300      	movs	r3, #0
 800406c:	e089      	b.n	8004182 <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1c59      	adds	r1, r3, #1
 8004076:	6139      	str	r1, [r7, #16]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fb97 	bl	80037b8 <MATCH_MARK>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <decodeLG+0x44>
 8004090:	2300      	movs	r3, #0
 8004092:	e076      	b.n	8004182 <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1c59      	adds	r1, r3, #1
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fbdc 	bl	8003868 <MATCH_SPACE>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <decodeLG+0x6a>
 80040b6:	2300      	movs	r3, #0
 80040b8:	e063      	b.n	8004182 <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e042      	b.n	8004146 <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	6139      	str	r1, [r7, #16]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fb6e 	bl	80037b8 <MATCH_MARK>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <decodeLG+0x96>
 80040e2:	2300      	movs	r3, #0
 80040e4:	e04d      	b.n	8004182 <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fbb5 	bl	8003868 <MATCH_SPACE>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <decodeLG+0xc0>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e014      	b.n	800413a <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f240 2126 	movw	r1, #550	; 0x226
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fba0 	bl	8003868 <MATCH_SPACE>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <decodeLG+0xe6>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e001      	b.n	800413a <decodeLG+0xea>
        else                                                           return false ;
 8004136:	2300      	movs	r3, #0
 8004138:	e023      	b.n	8004182 <decodeLG+0x132>
        offset++;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b1b      	cmp	r3, #27
 800414a:	ddb9      	ble.n	80040c0 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fb2a 	bl	80037b8 <MATCH_MARK>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <decodeLG+0x11e>
 800416a:	2300      	movs	r3, #0
 800416c:	e009      	b.n	8004182 <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	221c      	movs	r2, #28
 8004172:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	220a      	movs	r2, #10
 800417e:	701a      	strb	r2, [r3, #0]
    return true;
 8004180:	2301      	movs	r3, #1
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200000e4 	.word	0x200000e4

08004190 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 800419c:	4b42      	ldr	r3, [pc, #264]	; (80042a8 <decodeMitsubishi+0x118>)
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b21      	cmp	r3, #33	; 0x21
 80041a4:	d801      	bhi.n	80041aa <decodeMitsubishi+0x1a>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e07a      	b.n	80042a0 <decodeMitsubishi+0x110>
  int offset = 0; // Skip first space
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
    results->decode_type = MITSUBISHI;
    return true;
  }
#endif

  offset++;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60bb      	str	r3, [r7, #8]

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff faf6 	bl	80037b8 <MATCH_MARK>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <decodeMitsubishi+0x46>
 80041d2:	2300      	movs	r3, #0
 80041d4:	e064      	b.n	80042a0 <decodeMitsubishi+0x110>
  offset++;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]

  while (offset + 1 < irparams.rawlen) {
 80041dc:	e03e      	b.n	800425c <decodeMitsubishi+0xcc>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f240 719e 	movw	r1, #1950	; 0x79e
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fae1 	bl	80037b8 <MATCH_MARK>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <decodeMitsubishi+0x78>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e014      	b.n	8004232 <decodeMitsubishi+0xa2>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f240 21ee 	movw	r1, #750	; 0x2ee
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff facc 	bl	80037b8 <MATCH_MARK>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <decodeMitsubishi+0x9e>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e001      	b.n	8004232 <decodeMitsubishi+0xa2>
    else                                                                 return false ;
 800422e:	2300      	movs	r3, #0
 8004230:	e036      	b.n	80042a0 <decodeMitsubishi+0x110>
    offset++;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3301      	adds	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fb0c 	bl	8003868 <MATCH_SPACE>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <decodeMitsubishi+0xdc>
    offset++;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3301      	adds	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
  while (offset + 1 < irparams.rawlen) {
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3301      	adds	r3, #1
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <decodeMitsubishi+0x118>)
 8004262:	7852      	ldrb	r2, [r2, #1]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	4293      	cmp	r3, r2
 8004268:	dbb9      	blt.n	80041de <decodeMitsubishi+0x4e>
 800426a:	e000      	b.n	800426e <decodeMitsubishi+0xde>
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 800426c:	bf00      	nop
  }

  // Success
  results->bits = (offset - 1) / 2;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	0fda      	lsrs	r2, r3, #31
 8004274:	4413      	add	r3, r2
 8004276:	105b      	asrs	r3, r3, #1
 8004278:	b21a      	sxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	811a      	strh	r2, [r3, #8]
  if (results->bits < MITSUBISHI_BITS) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	dc04      	bgt.n	8004292 <decodeMitsubishi+0x102>
    results->bits = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	811a      	strh	r2, [r3, #8]
    return false;
 800428e:	2300      	movs	r3, #0
 8004290:	e006      	b.n	80042a0 <decodeMitsubishi+0x110>
  }

  results->value       = data;
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]
  results->decode_type = MITSUBISHI;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	220c      	movs	r2, #12
 800429c:	701a      	strb	r2, [r3, #0]
  return true;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200000e4 	.word	0x200000e4

080042ac <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f242 3128 	movw	r1, #9000	; 0x2328
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fa72 	bl	80037b8 <MATCH_MARK>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <decodeNEC+0x32>
 80042da:	2300      	movs	r3, #0
 80042dc:	e0a1      	b.n	8004422 <decodeNEC+0x176>
	offset++;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 80042e4:	4b51      	ldr	r3, [pc, #324]	; (800442c <decodeNEC+0x180>)
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d12a      	bne.n	8004344 <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fab1 	bl	8003868 <MATCH_SPACE>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3301      	adds	r3, #1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fa49 	bl	80037b8 <MATCH_MARK>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	701a      	strb	r2, [r3, #0]
		return true;
 8004340:	2301      	movs	r3, #1
 8004342:	e06e      	b.n	8004422 <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 8004344:	4b39      	ldr	r3, [pc, #228]	; (800442c <decodeNEC+0x180>)
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b43      	cmp	r3, #67	; 0x43
 800434c:	d801      	bhi.n	8004352 <decodeNEC+0xa6>
 800434e:	2300      	movs	r3, #0
 8004350:	e067      	b.n	8004422 <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f241 1194 	movw	r1, #4500	; 0x1194
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fa7f 	bl	8003868 <MATCH_SPACE>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <decodeNEC+0xc8>
 8004370:	2300      	movs	r3, #0
 8004372:	e056      	b.n	8004422 <decodeNEC+0x176>
	offset++;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3301      	adds	r3, #1
 8004378:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e043      	b.n	8004408 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fa10 	bl	80037b8 <MATCH_MARK>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <decodeNEC+0xf6>
 800439e:	2300      	movs	r3, #0
 80043a0:	e03f      	b.n	8004422 <decodeNEC+0x176>
		offset++;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3301      	adds	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f240 619a 	movw	r1, #1690	; 0x69a
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fa54 	bl	8003868 <MATCH_SPACE>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <decodeNEC+0x126>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e014      	b.n	80043fc <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fa3f 	bl	8003868 <MATCH_SPACE>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <decodeNEC+0x14c>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e001      	b.n	80043fc <decodeNEC+0x150>
		else                                                            return false ;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e012      	b.n	8004422 <decodeNEC+0x176>
		offset++;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b1f      	cmp	r3, #31
 800440c:	ddb8      	ble.n	8004380 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	701a      	strb	r2, [r3, #0]

	return true;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200000e4 	.word	0x200000e4

08004430 <decodePanasonic>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
uint8_t decodePanasonic (decode_results *results)
{
 8004430:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
    unsigned long long  data   = 0;
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	f04f 0400 	mov.w	r4, #0
 8004442:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int                 offset = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	60f9      	str	r1, [r7, #12]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f640 51ae 	movw	r1, #3502	; 0xdae
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff f9a9 	bl	80037b8 <MATCH_MARK>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <decodePanasonic+0x40>
 800446c:	2300      	movs	r3, #0
 800446e:	e080      	b.n	8004572 <decodePanasonic+0x142>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1c59      	adds	r1, r3, #1
 8004478:	60f9      	str	r1, [r7, #12]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f996 	bl	80037b8 <MATCH_MARK>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <decodePanasonic+0x66>
 8004492:	2300      	movs	r3, #0
 8004494:	e06d      	b.n	8004572 <decodePanasonic+0x142>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	e052      	b.n	8004542 <decodePanasonic+0x112>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	60f9      	str	r1, [r7, #12]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f980 	bl	80037b8 <MATCH_MARK>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <decodePanasonic+0x92>
 80044be:	2300      	movs	r3, #0
 80044c0:	e057      	b.n	8004572 <decodePanasonic+0x142>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f240 41dc 	movw	r1, #1244	; 0x4dc
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f9c7 	bl	8003868 <MATCH_SPACE>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d011      	beq.n	8004504 <decodePanasonic+0xd4>
 80044e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044e4:	184b      	adds	r3, r1, r1
 80044e6:	eb42 0402 	adc.w	r4, r2, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	4622      	mov	r2, r4
 80044ee:	f04f 0301 	mov.w	r3, #1
 80044f2:	f04f 0400 	mov.w	r4, #0
 80044f6:	ea43 0b01 	orr.w	fp, r3, r1
 80044fa:	ea44 0c02 	orr.w	ip, r4, r2
 80044fe:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 8004502:	e018      	b.n	8004536 <decodePanasonic+0x106>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f9a6 	bl	8003868 <MATCH_SPACE>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <decodePanasonic+0x102>
 8004522:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004526:	184b      	adds	r3, r1, r1
 8004528:	eb42 0402 	adc.w	r4, r2, r2
 800452c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8004530:	e001      	b.n	8004536 <decodePanasonic+0x106>
        else                                                                 return false ;
 8004532:	2300      	movs	r3, #0
 8004534:	e01d      	b.n	8004572 <decodePanasonic+0x142>
        offset++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b2f      	cmp	r3, #47	; 0x2f
 8004546:	dda9      	ble.n	800449c <decodePanasonic+0x6c>
    }

    results->value       = (unsigned long)data;
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	605a      	str	r2, [r3, #4]
    results->address     = (unsigned int)(data >> 32);
 800454e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f04f 0400 	mov.w	r4, #0
 800455a:	0013      	movs	r3, r2
 800455c:	2400      	movs	r4, #0
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	805a      	strh	r2, [r3, #2]
    results->decode_type = PANASONIC;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2205      	movs	r2, #5
 8004568:	701a      	strb	r2, [r3, #0]
    results->bits        = PANASONIC_BITS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2230      	movs	r2, #48	; 0x30
 800456e:	811a      	strh	r2, [r3, #8]

    return true;
 8004570:	2301      	movs	r3, #1
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800457c <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8004594:	4293      	cmp	r3, r2
 8004596:	db01      	blt.n	800459c <getRClevel+0x20>
 8004598:	2301      	movs	r3, #1
 800459a:	e05b      	b.n	8004654 <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <getRClevel+0x50>
 80045c8:	2364      	movs	r3, #100	; 0x64
 80045ca:	e001      	b.n	80045d0 <getRClevel+0x54>
 80045cc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80045d0:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	4619      	mov	r1, r3
 80045da:	69b8      	ldr	r0, [r7, #24]
 80045dc:	f7ff f898 	bl	8003710 <MATCH>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <getRClevel+0x70>
 80045e6:	2301      	movs	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e020      	b.n	800462e <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	69b8      	ldr	r0, [r7, #24]
 80045f8:	f7ff f88a 	bl	8003710 <MATCH>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <getRClevel+0x8c>
 8004602:	2302      	movs	r3, #2
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e012      	b.n	800462e <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	441a      	add	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	4619      	mov	r1, r3
 8004616:	69b8      	ldr	r0, [r7, #24]
 8004618:	f7ff f87a 	bl	8003710 <MATCH>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <getRClevel+0xac>
 8004622:	2303      	movs	r3, #3
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e002      	b.n	800462e <getRClevel+0xb2>
	else                                         return -1 ;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	e012      	b.n	8004654 <getRClevel+0xd8>

	(*used)++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	429a      	cmp	r2, r3
 8004640:	dc07      	bgt.n	8004652 <getRClevel+0xd6>
		*used = 0;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
		(*offset)++;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 800466c:	2301      	movs	r3, #1
 800466e:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8004670:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <decodeRC5+0x108>)
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d801      	bhi.n	800467e <decodeRC5+0x22>
 800467a:	2300      	movs	r3, #0
 800467c:	e06d      	b.n	800475a <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 800467e:	f107 020c 	add.w	r2, r7, #12
 8004682:	f107 0108 	add.w	r1, r7, #8
 8004686:	f240 3379 	movw	r3, #889	; 0x379
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ff76 	bl	800457c <getRClevel>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <decodeRC5+0x3e>
 8004696:	2300      	movs	r3, #0
 8004698:	e05f      	b.n	800475a <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 800469a:	f107 020c 	add.w	r2, r7, #12
 800469e:	f107 0108 	add.w	r1, r7, #8
 80046a2:	f240 3379 	movw	r3, #889	; 0x379
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff68 	bl	800457c <getRClevel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <decodeRC5+0x5a>
 80046b2:	2300      	movs	r3, #0
 80046b4:	e051      	b.n	800475a <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 80046b6:	f107 020c 	add.w	r2, r7, #12
 80046ba:	f107 0108 	add.w	r1, r7, #8
 80046be:	f240 3379 	movw	r3, #889	; 0x379
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ff5a 	bl	800457c <getRClevel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <decodeRC5+0x76>
 80046ce:	2300      	movs	r3, #0
 80046d0:	e043      	b.n	800475a <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e02e      	b.n	8004736 <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 80046d8:	f107 020c 	add.w	r2, r7, #12
 80046dc:	f107 0108 	add.w	r1, r7, #8
 80046e0:	f240 3379 	movw	r3, #889	; 0x379
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff49 	bl	800457c <getRClevel>
 80046ea:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 80046ec:	f107 020c 	add.w	r2, r7, #12
 80046f0:	f107 0108 	add.w	r1, r7, #8
 80046f4:	f240 3379 	movw	r3, #889	; 0x379
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff3f 	bl	800457c <getRClevel>
 80046fe:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d108      	bne.n	8004718 <decodeRC5+0xbc>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <decodeRC5+0xbc>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e00b      	b.n	8004730 <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <decodeRC5+0xd0>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d103      	bne.n	800472c <decodeRC5+0xd0>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e001      	b.n	8004730 <decodeRC5+0xd4>
		else                                              return false ;
 800472c:	2300      	movs	r3, #0
 800472e:	e014      	b.n	800475a <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <decodeRC5+0x108>)
 8004738:	785b      	ldrb	r3, [r3, #1]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	dcc9      	bgt.n	80046d8 <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	b21a      	sxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
	return true;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	200000e4 	.word	0x200000e4

08004768 <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 8004778:	2301      	movs	r3, #1
 800477a:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc01      	bgt.n	800478a <decodeRC6+0x22>
 8004786:	2300      	movs	r3, #0
 8004788:	e0a9      	b.n	80048de <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f640 216a 	movw	r1, #2666	; 0xa6a
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f809 	bl	80037b8 <MATCH_MARK>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <decodeRC6+0x48>
 80047ac:	2300      	movs	r3, #0
 80047ae:	e096      	b.n	80048de <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f240 3179 	movw	r1, #889	; 0x379
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f84e 	bl	8003868 <MATCH_SPACE>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <decodeRC6+0x6e>
 80047d2:	2300      	movs	r3, #0
 80047d4:	e083      	b.n	80048de <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 80047d6:	f107 020c 	add.w	r2, r7, #12
 80047da:	f107 0108 	add.w	r1, r7, #8
 80047de:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff feca 	bl	800457c <getRClevel>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <decodeRC6+0x8a>
 80047ee:	2300      	movs	r3, #0
 80047f0:	e075      	b.n	80048de <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 80047f2:	f107 020c 	add.w	r2, r7, #12
 80047f6:	f107 0108 	add.w	r1, r7, #8
 80047fa:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff febc 	bl	800457c <getRClevel>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d001      	beq.n	800480e <decodeRC6+0xa6>
 800480a:	2300      	movs	r3, #0
 800480c:	e067      	b.n	80048de <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e052      	b.n	80048ba <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 8004814:	f107 020c 	add.w	r2, r7, #12
 8004818:	f107 0108 	add.w	r1, r7, #8
 800481c:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff feab 	bl	800457c <getRClevel>
 8004826:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d10e      	bne.n	800484c <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 800482e:	f107 020c 	add.w	r2, r7, #12
 8004832:	f107 0108 	add.w	r1, r7, #8
 8004836:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fe9e 	bl	800457c <getRClevel>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4293      	cmp	r3, r2
 8004846:	d001      	beq.n	800484c <decodeRC6+0xe4>
 8004848:	2300      	movs	r3, #0
 800484a:	e048      	b.n	80048de <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	f107 0108 	add.w	r1, r7, #8
 8004854:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff fe8f 	bl	800457c <getRClevel>
 800485e:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d10e      	bne.n	8004884 <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 8004866:	f107 020c 	add.w	r2, r7, #12
 800486a:	f107 0108 	add.w	r1, r7, #8
 800486e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fe82 	bl	800457c <getRClevel>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4293      	cmp	r3, r2
 800487e:	d001      	beq.n	8004884 <decodeRC6+0x11c>
 8004880:	2300      	movs	r3, #0
 8004882:	e02c      	b.n	80048de <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <decodeRC6+0x134>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d105      	bne.n	800489c <decodeRC6+0x134>
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e00b      	b.n	80048b4 <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <decodeRC6+0x148>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <decodeRC6+0x148>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e001      	b.n	80048b4 <decodeRC6+0x14c>
		else                                              return false ;            // Error
 80048b0:	2300      	movs	r3, #0
 80048b2:	e014      	b.n	80048de <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	dca5      	bgt.n	8004814 <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	b21a      	sxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
	return true;
 80048dc:	2301      	movs	r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 80048f4:	2301      	movs	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f241 1194 	movw	r1, #4500	; 0x1194
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe ff54 	bl	80037b8 <MATCH_MARK>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <decodeSAMSUNG+0x32>
 8004916:	2300      	movs	r3, #0
 8004918:	e09f      	b.n	8004a5a <decodeSAMSUNG+0x172>
	offset++;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	3301      	adds	r3, #1
 800491e:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <decodeSAMSUNG+0x17c>)
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b04      	cmp	r3, #4
 8004928:	d12a      	bne.n	8004980 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe ff93 	bl	8003868 <MATCH_SPACE>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	f44f 710c 	mov.w	r1, #560	; 0x230
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe ff2b 	bl	80037b8 <MATCH_MARK>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f04f 32ff 	mov.w	r2, #4294967295
 8004974:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2207      	movs	r2, #7
 800497a:	701a      	strb	r2, [r3, #0]
		return true;
 800497c:	2301      	movs	r3, #1
 800497e:	e06c      	b.n	8004a5a <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8004980:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <decodeSAMSUNG+0x17c>)
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b43      	cmp	r3, #67	; 0x43
 8004988:	d801      	bhi.n	800498e <decodeSAMSUNG+0xa6>
 800498a:	2300      	movs	r3, #0
 800498c:	e065      	b.n	8004a5a <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1c59      	adds	r1, r3, #1
 8004996:	6139      	str	r1, [r7, #16]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f241 1194 	movw	r1, #4500	; 0x1194
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ff5f 	bl	8003868 <MATCH_SPACE>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <decodeSAMSUNG+0xcc>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e052      	b.n	8004a5a <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e042      	b.n	8004a40 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	6139      	str	r1, [r7, #16]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f44f 710c 	mov.w	r1, #560	; 0x230
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fef1 	bl	80037b8 <MATCH_MARK>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <decodeSAMSUNG+0xf8>
 80049dc:	2300      	movs	r3, #0
 80049de:	e03c      	b.n	8004a5a <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff38 	bl	8003868 <MATCH_SPACE>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <decodeSAMSUNG+0x122>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e014      	b.n	8004a34 <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f44f 710c 	mov.w	r1, #560	; 0x230
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe ff23 	bl	8003868 <MATCH_SPACE>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <decodeSAMSUNG+0x148>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e001      	b.n	8004a34 <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e012      	b.n	8004a5a <decodeSAMSUNG+0x172>
		offset++;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3301      	adds	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b1f      	cmp	r3, #31
 8004a44:	ddb9      	ble.n	80049ba <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2207      	movs	r2, #7
 8004a56:	701a      	strb	r2, [r3, #0]
	return true;
 8004a58:	2301      	movs	r3, #1
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200000e4 	.word	0x200000e4

08004a68 <decodeSanyo>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo (decode_results *results)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Skip first space  <-- CHECK THIS!
 8004a74:	2300      	movs	r3, #0
 8004a76:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 8004a78:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <decodeSanyo+0x164>)
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b19      	cmp	r3, #25
 8004a80:	d801      	bhi.n	8004a86 <decodeSanyo+0x1e>
 8004a82:	2300      	movs	r3, #0
 8004a84:	e09e      	b.n	8004bc4 <decodeSanyo+0x15c>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004a98:	d20b      	bcs.n	8004ab2 <decodeSanyo+0x4a>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	605a      	str	r2, [r3, #4]
		results->decode_type = SANYO;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	220b      	movs	r2, #11
 8004aac:	701a      	strb	r2, [r3, #0]
		return true;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e088      	b.n	8004bc4 <decodeSanyo+0x15c>
	}
	offset++;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f640 51ac 	movw	r1, #3500	; 0xdac
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fe72 	bl	80037b8 <MATCH_MARK>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <decodeSanyo+0x76>
 8004ada:	2300      	movs	r3, #0
 8004adc:	e072      	b.n	8004bc4 <decodeSanyo+0x15c>

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	1c59      	adds	r1, r3, #1
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f640 51ac 	movw	r1, #3500	; 0xdac
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fe5f 	bl	80037b8 <MATCH_MARK>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13f      	bne.n	8004b80 <decodeSanyo+0x118>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e05f      	b.n	8004bc4 <decodeSanyo+0x15c>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fea4 	bl	8003868 <MATCH_SPACE>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d034      	beq.n	8004b90 <decodeSanyo+0x128>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fe3d 	bl	80037b8 <MATCH_MARK>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <decodeSanyo+0xe8>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e014      	b.n	8004b7a <decodeSanyo+0x112>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fe28 	bl	80037b8 <MATCH_MARK>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <decodeSanyo+0x10e>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e001      	b.n	8004b7a <decodeSanyo+0x112>
		else                                                            return false ;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e024      	b.n	8004bc4 <decodeSanyo+0x15c>
		offset++;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3301      	adds	r3, #1
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <decodeSanyo+0x164>)
 8004b86:	7852      	ldrb	r2, [r2, #1]
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	dbba      	blt.n	8004b04 <decodeSanyo+0x9c>
 8004b8e:	e000      	b.n	8004b92 <decodeSanyo+0x12a>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 8004b90:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	0fda      	lsrs	r2, r3, #31
 8004b98:	4413      	add	r3, r2
 8004b9a:	105b      	asrs	r3, r3, #1
 8004b9c:	b21a      	sxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ba8:	2b0b      	cmp	r3, #11
 8004baa:	dc04      	bgt.n	8004bb6 <decodeSanyo+0x14e>
		results->bits = 0;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	811a      	strh	r2, [r3, #8]
		return false;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e006      	b.n	8004bc4 <decodeSanyo+0x15c>
	}

	results->value       = data;
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]
	results->decode_type = SANYO;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	220b      	movs	r2, #11
 8004bc0:	701a      	strb	r2, [r3, #0]
	return true;
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200000e4 	.word	0x200000e4

08004bd0 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <decodeSony+0x140>)
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b19      	cmp	r3, #25
 8004be8:	d801      	bhi.n	8004bee <decodeSony+0x1e>
 8004bea:	2300      	movs	r3, #0
 8004bec:	e08b      	b.n	8004d06 <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c00:	d20b      	bcs.n	8004c1a <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	220b      	movs	r2, #11
 8004c14:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e075      	b.n	8004d06 <decodeSony+0x136>
	}
	offset++;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fdbe 	bl	80037b8 <MATCH_MARK>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13f      	bne.n	8004cc2 <decodeSony+0xf2>
 8004c42:	2300      	movs	r3, #0
 8004c44:	e05f      	b.n	8004d06 <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1c59      	adds	r1, r3, #1
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fe03 	bl	8003868 <MATCH_SPACE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d034      	beq.n	8004cd2 <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fd9c 	bl	80037b8 <MATCH_MARK>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <decodeSony+0xc2>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e014      	b.n	8004cbc <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe fd87 	bl	80037b8 <MATCH_MARK>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <decodeSony+0xe8>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e001      	b.n	8004cbc <decodeSony+0xec>
		else                                                           return false ;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e024      	b.n	8004d06 <decodeSony+0x136>
		offset++;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <decodeSony+0x140>)
 8004cc8:	7852      	ldrb	r2, [r2, #1]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	dbba      	blt.n	8004c46 <decodeSony+0x76>
 8004cd0:	e000      	b.n	8004cd4 <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 8004cd2:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	0fda      	lsrs	r2, r3, #31
 8004cda:	4413      	add	r3, r2
 8004cdc:	105b      	asrs	r3, r3, #1
 8004cde:	b21a      	sxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cea:	2b0b      	cmp	r3, #11
 8004cec:	dc04      	bgt.n	8004cf8 <decodeSony+0x128>
		results->bits = 0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	811a      	strh	r2, [r3, #8]
		return false;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e006      	b.n	8004d06 <decodeSony+0x136>
	}
	results->value       = data;
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	701a      	strb	r2, [r3, #0]
	return true;
 8004d04:	2301      	movs	r3, #1
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200000e4 	.word	0x200000e4

08004d14 <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // skip initial space
 8004d20:	2301      	movs	r3, #1
 8004d22:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <decodeWhynter+0x188>)
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b45      	cmp	r3, #69	; 0x45
 8004d2c:	d801      	bhi.n	8004d32 <decodeWhynter+0x1e>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e0af      	b.n	8004e92 <decodeWhynter+0x17e>

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1c59      	adds	r1, r3, #1
 8004d3a:	6139      	str	r1, [r7, #16]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fd35 	bl	80037b8 <MATCH_MARK>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <decodeWhynter+0x44>
 8004d54:	2300      	movs	r3, #0
 8004d56:	e09c      	b.n	8004e92 <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1c59      	adds	r1, r3, #1
 8004d60:	6139      	str	r1, [r7, #16]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fd7a 	bl	8003868 <MATCH_SPACE>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <decodeWhynter+0x6a>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e089      	b.n	8004e92 <decodeWhynter+0x17e>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1c59      	adds	r1, r3, #1
 8004d86:	6139      	str	r1, [r7, #16]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f640 3122 	movw	r1, #2850	; 0xb22
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe fd0f 	bl	80037b8 <MATCH_MARK>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <decodeWhynter+0x90>
 8004da0:	2300      	movs	r3, #0
 8004da2:	e076      	b.n	8004e92 <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	6139      	str	r1, [r7, #16]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f640 3122 	movw	r1, #2850	; 0xb22
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fd54 	bl	8003868 <MATCH_SPACE>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <decodeWhynter+0xb6>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e063      	b.n	8004e92 <decodeWhynter+0x17e>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e042      	b.n	8004e56 <decodeWhynter+0x142>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1c59      	adds	r1, r3, #1
 8004dd8:	6139      	str	r1, [r7, #16]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fce6 	bl	80037b8 <MATCH_MARK>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <decodeWhynter+0xe2>
 8004df2:	2300      	movs	r3, #0
 8004df4:	e04d      	b.n	8004e92 <decodeWhynter+0x17e>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f640 0166 	movw	r1, #2150	; 0x866
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fd2d 	bl	8003868 <MATCH_SPACE>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <decodeWhynter+0x10c>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e014      	b.n	8004e4a <decodeWhynter+0x136>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe fd18 	bl	8003868 <MATCH_SPACE>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <decodeWhynter+0x132>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e001      	b.n	8004e4a <decodeWhynter+0x136>
		else                                                                return false ;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e023      	b.n	8004e92 <decodeWhynter+0x17e>
		offset++;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b1f      	cmp	r3, #31
 8004e5a:	ddb9      	ble.n	8004dd0 <decodeWhynter+0xbc>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fca2 	bl	80037b8 <MATCH_MARK>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <decodeWhynter+0x16a>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e009      	b.n	8004e92 <decodeWhynter+0x17e>

	// Success
	results->bits = WHYNTER_BITS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	811a      	strh	r2, [r3, #8]
	results->value = data;
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
	results->decode_type = WHYNTER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	701a      	strb	r2, [r3, #0]
	return true;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200000e4 	.word	0x200000e4

08004ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ea0:	b5b0      	push	{r4, r5, r7, lr}
 8004ea2:	b09a      	sub	sp, #104	; 0x68
 8004ea4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ea6:	f7fb fff1 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eaa:	f000 f86f 	bl	8004f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004eae:	f000 f9a1 	bl	80051f4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8004eb2:	f000 f8d5 	bl	8005060 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004eb6:	f000 f949 	bl	800514c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004eba:	f000 f971 	bl	80051a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char trans_str[96] = {0,};
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	2260      	movs	r2, #96	; 0x60
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fc2f 	bl	8005728 <memset>
  snprintf(trans_str, 64, "IR-rec-trans https://istarik.ru/blog/stm32/125.html\n");
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <main+0xd8>)
 8004ece:	461c      	mov	r4, r3
 8004ed0:	4615      	mov	r5, r2
 8004ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ede:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ee2:	6020      	str	r0, [r4, #0]
 8004ee4:	3404      	adds	r4, #4
 8004ee6:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 100);
 8004ee8:	463b      	mov	r3, r7
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb f978 	bl	80001e0 <strlen>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	2364      	movs	r3, #100	; 0x64
 8004ef8:	4820      	ldr	r0, [pc, #128]	; (8004f7c <main+0xdc>)
 8004efa:	f7fd fe2b 	bl	8002b54 <HAL_UART_Transmit>
  //my_enableIRIn(); 
  /* USER CODE END 2 */
  my_enableIRIn();
 8004efe:	f7fe fda1 	bl	8003a44 <my_enableIRIn>
  /* USER CODE BEGIN WHILE */
  static char *decode_str[] = {"UNUSED", "UNKNOWN", "RC5", "RC6", "NEC", "SONY", "PANASONIC", "JVC", "SAMSUNG", "WHYNTER", "AIWA_RC_T501", "LG", "SANYO", "MITSUBISHI", "DISH", "SHARP", "DENON", "PRONTO"};
  while (1)
  {
    /* USER CODE END WHILE */
		if(my_decode(&results))
 8004f02:	481f      	ldr	r0, [pc, #124]	; (8004f80 <main+0xe0>)
 8004f04:	f7fe fd08 	bl	8003918 <my_decode>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d024      	beq.n	8004f58 <main+0xb8>
		{

			//snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
			sprintf(trans_str,"Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <main+0xe0>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <main+0xe0>)
 8004f16:	f993 3000 	ldrsb.w	r3, [r3]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <main+0xe4>)
 8004f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <main+0xe0>)
 8004f24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f28:	4638      	mov	r0, r7
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	460a      	mov	r2, r1
 8004f30:	4915      	ldr	r1, [pc, #84]	; (8004f88 <main+0xe8>)
 8004f32:	f000 fc01 	bl	8005738 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)&trans_str, strlen(trans_str), 100);
 8004f36:	463b      	mov	r3, r7
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fb f951 	bl	80001e0 <strlen>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	4639      	mov	r1, r7
 8004f44:	2364      	movs	r3, #100	; 0x64
 8004f46:	480d      	ldr	r0, [pc, #52]	; (8004f7c <main+0xdc>)
 8004f48:	f7fd fe04 	bl	8002b54 <HAL_UART_Transmit>
			HAL_Delay(300);
 8004f4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f50:	f7fc f80e 	bl	8000f70 <HAL_Delay>
			my_resume();
 8004f54:	f7fe fdc4 	bl	8003ae0 <my_resume>
		}
		HAL_UART_Transmit(&huart1, (char*)&trans_str, strlen(trans_str), 100);
 8004f58:	463b      	mov	r3, r7
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb f940 	bl	80001e0 <strlen>
 8004f60:	4603      	mov	r3, r0
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	4639      	mov	r1, r7
 8004f66:	2364      	movs	r3, #100	; 0x64
 8004f68:	4804      	ldr	r0, [pc, #16]	; (8004f7c <main+0xdc>)
 8004f6a:	f7fd fdf3 	bl	8002b54 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8004f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f72:	f7fb fffd 	bl	8000f70 <HAL_Delay>
		if(my_decode(&results))
 8004f76:	e7c4      	b.n	8004f02 <main+0x62>
 8004f78:	08005f5c 	.word	0x08005f5c
 8004f7c:	20000340 	.word	0x20000340
 8004f80:	200002ec 	.word	0x200002ec
 8004f84:	20000008 	.word	0x20000008
 8004f88:	08005f94 	.word	0x08005f94

08004f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b094      	sub	sp, #80	; 0x50
 8004f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f92:	f107 0320 	add.w	r3, r7, #32
 8004f96:	2230      	movs	r2, #48	; 0x30
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fbc4 	bl	8005728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fa0:	f107 030c 	add.w	r3, r7, #12
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	4b28      	ldr	r3, [pc, #160]	; (8005058 <SystemClock_Config+0xcc>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <SystemClock_Config+0xcc>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <SystemClock_Config+0xcc>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	4b22      	ldr	r3, [pc, #136]	; (800505c <SystemClock_Config+0xd0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a21      	ldr	r2, [pc, #132]	; (800505c <SystemClock_Config+0xd0>)
 8004fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <SystemClock_Config+0xd0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005000:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005006:	2304      	movs	r3, #4
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800500a:	2304      	movs	r3, #4
 800500c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800500e:	f107 0320 	add.w	r3, r7, #32
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fae6 	bl	80015e4 <HAL_RCC_OscConfig>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800501e:	f000 f949 	bl	80052b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005022:	230f      	movs	r3, #15
 8005024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005026:	2302      	movs	r3, #2
 8005028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	2102      	movs	r1, #2
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc fd12 	bl	8001a68 <HAL_RCC_ClockConfig>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800504a:	f000 f933 	bl	80052b4 <Error_Handler>
  }
}
 800504e:	bf00      	nop
 8005050:	3750      	adds	r7, #80	; 0x50
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	40007000 	.word	0x40007000

08005060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005074:	f107 0320 	add.w	r3, r7, #32
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
 800508c:	615a      	str	r2, [r3, #20]
 800508e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005090:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <MX_TIM4_Init+0xe4>)
 8005092:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <MX_TIM4_Init+0xe8>)
 8005094:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <MX_TIM4_Init+0xe4>)
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800509c:	4b29      	ldr	r3, [pc, #164]	; (8005144 <MX_TIM4_Init+0xe4>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80050a2:	4b28      	ldr	r3, [pc, #160]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a8:	4b26      	ldr	r3, [pc, #152]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050ae:	4b25      	ldr	r3, [pc, #148]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050b4:	4823      	ldr	r0, [pc, #140]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050b6:	f7fc fe9f 	bl	8001df8 <HAL_TIM_Base_Init>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80050c0:	f000 f8f8 	bl	80052b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80050ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ce:	4619      	mov	r1, r3
 80050d0:	481c      	ldr	r0, [pc, #112]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050d2:	f7fd f913 	bl	80022fc <HAL_TIM_ConfigClockSource>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80050dc:	f000 f8ea 	bl	80052b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80050e0:	4818      	ldr	r0, [pc, #96]	; (8005144 <MX_TIM4_Init+0xe4>)
 80050e2:	f7fc ff08 	bl	8001ef6 <HAL_TIM_PWM_Init>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80050ec:	f000 f8e2 	bl	80052b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050f0:	2300      	movs	r3, #0
 80050f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050f8:	f107 0320 	add.w	r3, r7, #32
 80050fc:	4619      	mov	r1, r3
 80050fe:	4811      	ldr	r0, [pc, #68]	; (8005144 <MX_TIM4_Init+0xe4>)
 8005100:	f7fd fc82 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800510a:	f000 f8d3 	bl	80052b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800510e:	2360      	movs	r3, #96	; 0x60
 8005110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2200      	movs	r2, #0
 8005122:	4619      	mov	r1, r3
 8005124:	4807      	ldr	r0, [pc, #28]	; (8005144 <MX_TIM4_Init+0xe4>)
 8005126:	f7fd f823 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8005130:	f000 f8c0 	bl	80052b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005134:	4803      	ldr	r0, [pc, #12]	; (8005144 <MX_TIM4_Init+0xe4>)
 8005136:	f000 f915 	bl	8005364 <HAL_TIM_MspPostInit>

}
 800513a:	bf00      	nop
 800513c:	3738      	adds	r7, #56	; 0x38
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000300 	.word	0x20000300
 8005148:	40000800 	.word	0x40000800

0800514c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <MX_USART1_UART_Init+0x50>)
 8005154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800515c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 800516c:	2200      	movs	r2, #0
 800516e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005172:	220c      	movs	r2, #12
 8005174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005178:	2200      	movs	r2, #0
 800517a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 800517e:	2200      	movs	r2, #0
 8005180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <MX_USART1_UART_Init+0x4c>)
 8005184:	f7fd fc99 	bl	8002aba <HAL_UART_Init>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800518e:	f000 f891 	bl	80052b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000340 	.word	0x20000340
 800519c:	40011000 	.word	0x40011000

080051a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <MX_USART2_UART_Init+0x50>)
 80051a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051c6:	220c      	movs	r2, #12
 80051c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051d6:	4805      	ldr	r0, [pc, #20]	; (80051ec <MX_USART2_UART_Init+0x4c>)
 80051d8:	f7fd fc6f 	bl	8002aba <HAL_UART_Init>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80051e2:	f000 f867 	bl	80052b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000380 	.word	0x20000380
 80051f0:	40004400 	.word	0x40004400

080051f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	6313      	str	r3, [r2, #48]	; 0x30
 800521a:	4b23      	ldr	r3, [pc, #140]	; (80052a8 <MX_GPIO_Init+0xb4>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <MX_GPIO_Init+0xb4>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6313      	str	r3, [r2, #48]	; 0x30
 8005236:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <MX_GPIO_Init+0xb4>)
 800524c:	f043 0308 	orr.w	r3, r3, #8
 8005250:	6313      	str	r3, [r2, #48]	; 0x30
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <MX_GPIO_Init+0xb4>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800525e:	2200      	movs	r2, #0
 8005260:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005264:	4811      	ldr	r0, [pc, #68]	; (80052ac <MX_GPIO_Init+0xb8>)
 8005266:	f7fc f9a3 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : recive_IR_Pin */
  GPIO_InitStruct.Pin = recive_IR_Pin;
 800526a:	2301      	movs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	4619      	mov	r1, r3
 800527c:	480c      	ldr	r0, [pc, #48]	; (80052b0 <MX_GPIO_Init+0xbc>)
 800527e:	f7fb fffd 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005282:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4619      	mov	r1, r3
 800529a:	4804      	ldr	r0, [pc, #16]	; (80052ac <MX_GPIO_Init+0xb8>)
 800529c:	f7fb ffee 	bl	800127c <HAL_GPIO_Init>

}
 80052a0:	bf00      	nop
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020c00 	.word	0x40020c00
 80052b0:	40020000 	.word	0x40020000

080052b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <HAL_MspInit+0x4c>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <HAL_MspInit+0x4c>)
 80052d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d8:	6453      	str	r3, [r2, #68]	; 0x44
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <HAL_MspInit+0x4c>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_MspInit+0x4c>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <HAL_MspInit+0x4c>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6413      	str	r3, [r2, #64]	; 0x40
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_MspInit+0x4c>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800

08005314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0e      	ldr	r2, [pc, #56]	; (800535c <HAL_TIM_Base_MspInit+0x48>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_TIM_Base_MspInit+0x4c>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <HAL_TIM_Base_MspInit+0x4c>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_TIM_Base_MspInit+0x4c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	201e      	movs	r0, #30
 8005348:	f7fb ff31 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800534c:	201e      	movs	r0, #30
 800534e:	f7fb ff4a 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40000800 	.word	0x40000800
 8005360:	40023800 	.word	0x40023800

08005364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a12      	ldr	r2, [pc, #72]	; (80053cc <HAL_TIM_MspPostInit+0x68>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d11e      	bne.n	80053c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <HAL_TIM_MspPostInit+0x6c>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <HAL_TIM_MspPostInit+0x6c>)
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <HAL_TIM_MspPostInit+0x6c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80053a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053b4:	2302      	movs	r3, #2
 80053b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	4619      	mov	r1, r3
 80053be:	4805      	ldr	r0, [pc, #20]	; (80053d4 <HAL_TIM_MspPostInit+0x70>)
 80053c0:	f7fb ff5c 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053c4:	bf00      	nop
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40020c00 	.word	0x40020c00

080053d8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a07      	ldr	r2, [pc, #28]	; (8005404 <HAL_TIM_Base_MspDeInit+0x2c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <HAL_TIM_Base_MspDeInit+0x30>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	4a06      	ldr	r2, [pc, #24]	; (8005408 <HAL_TIM_Base_MspDeInit+0x30>)
 80053f0:	f023 0304 	bic.w	r3, r3, #4
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80053f6:	201e      	movs	r0, #30
 80053f8:	f7fb ff03 	bl	8001202 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40000800 	.word	0x40000800
 8005408:	40023800 	.word	0x40023800

0800540c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	; 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3a      	ldr	r2, [pc, #232]	; (8005514 <HAL_UART_MspInit+0x108>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d135      	bne.n	800549a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	4b39      	ldr	r3, [pc, #228]	; (8005518 <HAL_UART_MspInit+0x10c>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	4a38      	ldr	r2, [pc, #224]	; (8005518 <HAL_UART_MspInit+0x10c>)
 8005438:	f043 0310 	orr.w	r3, r3, #16
 800543c:	6453      	str	r3, [r2, #68]	; 0x44
 800543e:	4b36      	ldr	r3, [pc, #216]	; (8005518 <HAL_UART_MspInit+0x10c>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	4b32      	ldr	r3, [pc, #200]	; (8005518 <HAL_UART_MspInit+0x10c>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	4a31      	ldr	r2, [pc, #196]	; (8005518 <HAL_UART_MspInit+0x10c>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6313      	str	r3, [r2, #48]	; 0x30
 800545a:	4b2f      	ldr	r3, [pc, #188]	; (8005518 <HAL_UART_MspInit+0x10c>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800546a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546c:	2302      	movs	r3, #2
 800546e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005470:	2301      	movs	r3, #1
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005474:	2303      	movs	r3, #3
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005478:	2307      	movs	r3, #7
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800547c:	f107 031c 	add.w	r3, r7, #28
 8005480:	4619      	mov	r1, r3
 8005482:	4826      	ldr	r0, [pc, #152]	; (800551c <HAL_UART_MspInit+0x110>)
 8005484:	f7fb fefa 	bl	800127c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	2025      	movs	r0, #37	; 0x25
 800548e:	f7fb fe8e 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005492:	2025      	movs	r0, #37	; 0x25
 8005494:	f7fb fea7 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005498:	e038      	b.n	800550c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_UART_MspInit+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d133      	bne.n	800550c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b2:	6413      	str	r3, [r2, #64]	; 0x40
 80054b4:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_UART_MspInit+0x10c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054dc:	230c      	movs	r3, #12
 80054de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e8:	2303      	movs	r3, #3
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054ec:	2307      	movs	r3, #7
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f0:	f107 031c 	add.w	r3, r7, #28
 80054f4:	4619      	mov	r1, r3
 80054f6:	4809      	ldr	r0, [pc, #36]	; (800551c <HAL_UART_MspInit+0x110>)
 80054f8:	f7fb fec0 	bl	800127c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	2026      	movs	r0, #38	; 0x26
 8005502:	f7fb fe54 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005506:	2026      	movs	r0, #38	; 0x26
 8005508:	f7fb fe6d 	bl	80011e6 <HAL_NVIC_EnableIRQ>
}
 800550c:	bf00      	nop
 800550e:	3730      	adds	r7, #48	; 0x30
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40011000 	.word	0x40011000
 8005518:	40023800 	.word	0x40023800
 800551c:	40020000 	.word	0x40020000
 8005520:	40004400 	.word	0x40004400

08005524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005536:	e7fe      	b.n	8005536 <HardFault_Handler+0x4>

08005538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800553c:	e7fe      	b.n	800553c <MemManage_Handler+0x4>

0800553e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005542:	e7fe      	b.n	8005542 <BusFault_Handler+0x4>

08005544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005548:	e7fe      	b.n	8005548 <UsageFault_Handler+0x4>

0800554a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005578:	f7fb fcda 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}

08005580 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005584:	4802      	ldr	r0, [pc, #8]	; (8005590 <TIM4_IRQHandler+0x10>)
 8005586:	f7fc fceb 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000300 	.word	0x20000300

08005594 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <USART1_IRQHandler+0x10>)
 800559a:	f7fd fb75 	bl	8002c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000340 	.word	0x20000340

080055a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <USART2_IRQHandler+0x10>)
 80055ae:	f7fd fb6b 	bl	8002c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000380 	.word	0x20000380

080055bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <_sbrk+0x50>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <_sbrk+0x16>
		heap_end = &end;
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <_sbrk+0x50>)
 80055ce:	4a10      	ldr	r2, [pc, #64]	; (8005610 <_sbrk+0x54>)
 80055d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055d2:	4b0e      	ldr	r3, [pc, #56]	; (800560c <_sbrk+0x50>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <_sbrk+0x50>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4413      	add	r3, r2
 80055e0:	466a      	mov	r2, sp
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d907      	bls.n	80055f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055e6:	f000 f875 	bl	80056d4 <__errno>
 80055ea:	4602      	mov	r2, r0
 80055ec:	230c      	movs	r3, #12
 80055ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	e006      	b.n	8005604 <_sbrk+0x48>
	}

	heap_end += incr;
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <_sbrk+0x50>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	4a03      	ldr	r2, [pc, #12]	; (800560c <_sbrk+0x50>)
 8005600:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200000d4 	.word	0x200000d4
 8005610:	200003c8 	.word	0x200003c8

08005614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <SystemInit+0x60>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <SystemInit+0x60>)
 8005620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005628:	4b13      	ldr	r3, [pc, #76]	; (8005678 <SystemInit+0x64>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a12      	ldr	r2, [pc, #72]	; (8005678 <SystemInit+0x64>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005634:	4b10      	ldr	r3, [pc, #64]	; (8005678 <SystemInit+0x64>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <SystemInit+0x64>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <SystemInit+0x64>)
 8005640:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005648:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <SystemInit+0x64>)
 800564c:	4a0b      	ldr	r2, [pc, #44]	; (800567c <SystemInit+0x68>)
 800564e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <SystemInit+0x64>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a08      	ldr	r2, [pc, #32]	; (8005678 <SystemInit+0x64>)
 8005656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <SystemInit+0x64>)
 800565e:	2200      	movs	r2, #0
 8005660:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <SystemInit+0x60>)
 8005664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005668:	609a      	str	r2, [r3, #8]
#endif
}
 800566a:	bf00      	nop
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000ed00 	.word	0xe000ed00
 8005678:	40023800 	.word	0x40023800
 800567c:	24003010 	.word	0x24003010

08005680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005684:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005686:	e003      	b.n	8005690 <LoopCopyDataInit>

08005688 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800568a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800568c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800568e:	3104      	adds	r1, #4

08005690 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005690:	480b      	ldr	r0, [pc, #44]	; (80056c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005694:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005696:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005698:	d3f6      	bcc.n	8005688 <CopyDataInit>
  ldr  r2, =_sbss
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800569c:	e002      	b.n	80056a4 <LoopFillZerobss>

0800569e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800569e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056a0:	f842 3b04 	str.w	r3, [r2], #4

080056a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056a8:	d3f9      	bcc.n	800569e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056aa:	f7ff ffb3 	bl	8005614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ae:	f000 f817 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056b2:	f7ff fbf5 	bl	8004ea0 <main>
  bx  lr    
 80056b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056bc:	0800609c 	.word	0x0800609c
  ldr  r0, =_sdata
 80056c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056c4:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80056c8:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80056cc:	200003c4 	.word	0x200003c4

080056d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056d0:	e7fe      	b.n	80056d0 <ADC_IRQHandler>
	...

080056d4 <__errno>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <__errno+0x8>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20000054 	.word	0x20000054

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4e0d      	ldr	r6, [pc, #52]	; (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e6:	1ba4      	subs	r4, r4, r6
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2500      	movs	r5, #0
 80056ec:	42a5      	cmp	r5, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4e0b      	ldr	r6, [pc, #44]	; (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	; (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 fc26 	bl	8005f44 <_init>
 80056f8:	1ba4      	subs	r4, r4, r6
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2500      	movs	r5, #0
 80056fe:	42a5      	cmp	r5, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005708:	4798      	blx	r3
 800570a:	3501      	adds	r5, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005712:	4798      	blx	r3
 8005714:	3501      	adds	r5, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08006094 	.word	0x08006094
 800571c:	08006094 	.word	0x08006094
 8005720:	08006094 	.word	0x08006094
 8005724:	08006098 	.word	0x08006098

08005728 <memset>:
 8005728:	4402      	add	r2, r0
 800572a:	4603      	mov	r3, r0
 800572c:	4293      	cmp	r3, r2
 800572e:	d100      	bne.n	8005732 <memset+0xa>
 8005730:	4770      	bx	lr
 8005732:	f803 1b01 	strb.w	r1, [r3], #1
 8005736:	e7f9      	b.n	800572c <memset+0x4>

08005738 <siprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b500      	push	{lr}
 800573c:	b09c      	sub	sp, #112	; 0x70
 800573e:	ab1d      	add	r3, sp, #116	; 0x74
 8005740:	9002      	str	r0, [sp, #8]
 8005742:	9006      	str	r0, [sp, #24]
 8005744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005748:	4809      	ldr	r0, [pc, #36]	; (8005770 <siprintf+0x38>)
 800574a:	9107      	str	r1, [sp, #28]
 800574c:	9104      	str	r1, [sp, #16]
 800574e:	4909      	ldr	r1, [pc, #36]	; (8005774 <siprintf+0x3c>)
 8005750:	f853 2b04 	ldr.w	r2, [r3], #4
 8005754:	9105      	str	r1, [sp, #20]
 8005756:	6800      	ldr	r0, [r0, #0]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	a902      	add	r1, sp, #8
 800575c:	f000 f866 	bl	800582c <_svfiprintf_r>
 8005760:	9b02      	ldr	r3, [sp, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	b01c      	add	sp, #112	; 0x70
 8005768:	f85d eb04 	ldr.w	lr, [sp], #4
 800576c:	b003      	add	sp, #12
 800576e:	4770      	bx	lr
 8005770:	20000054 	.word	0x20000054
 8005774:	ffff0208 	.word	0xffff0208

08005778 <__ssputs_r>:
 8005778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	688e      	ldr	r6, [r1, #8]
 800577e:	429e      	cmp	r6, r3
 8005780:	4682      	mov	sl, r0
 8005782:	460c      	mov	r4, r1
 8005784:	4690      	mov	r8, r2
 8005786:	4699      	mov	r9, r3
 8005788:	d837      	bhi.n	80057fa <__ssputs_r+0x82>
 800578a:	898a      	ldrh	r2, [r1, #12]
 800578c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005790:	d031      	beq.n	80057f6 <__ssputs_r+0x7e>
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	6909      	ldr	r1, [r1, #16]
 8005796:	1a6f      	subs	r7, r5, r1
 8005798:	6965      	ldr	r5, [r4, #20]
 800579a:	2302      	movs	r3, #2
 800579c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80057a4:	f109 0301 	add.w	r3, r9, #1
 80057a8:	443b      	add	r3, r7
 80057aa:	429d      	cmp	r5, r3
 80057ac:	bf38      	it	cc
 80057ae:	461d      	movcc	r5, r3
 80057b0:	0553      	lsls	r3, r2, #21
 80057b2:	d530      	bpl.n	8005816 <__ssputs_r+0x9e>
 80057b4:	4629      	mov	r1, r5
 80057b6:	f000 fb2b 	bl	8005e10 <_malloc_r>
 80057ba:	4606      	mov	r6, r0
 80057bc:	b950      	cbnz	r0, 80057d4 <__ssputs_r+0x5c>
 80057be:	230c      	movs	r3, #12
 80057c0:	f8ca 3000 	str.w	r3, [sl]
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d4:	463a      	mov	r2, r7
 80057d6:	6921      	ldr	r1, [r4, #16]
 80057d8:	f000 faa8 	bl	8005d2c <memcpy>
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e6:	81a3      	strh	r3, [r4, #12]
 80057e8:	6126      	str	r6, [r4, #16]
 80057ea:	6165      	str	r5, [r4, #20]
 80057ec:	443e      	add	r6, r7
 80057ee:	1bed      	subs	r5, r5, r7
 80057f0:	6026      	str	r6, [r4, #0]
 80057f2:	60a5      	str	r5, [r4, #8]
 80057f4:	464e      	mov	r6, r9
 80057f6:	454e      	cmp	r6, r9
 80057f8:	d900      	bls.n	80057fc <__ssputs_r+0x84>
 80057fa:	464e      	mov	r6, r9
 80057fc:	4632      	mov	r2, r6
 80057fe:	4641      	mov	r1, r8
 8005800:	6820      	ldr	r0, [r4, #0]
 8005802:	f000 fa9e 	bl	8005d42 <memmove>
 8005806:	68a3      	ldr	r3, [r4, #8]
 8005808:	1b9b      	subs	r3, r3, r6
 800580a:	60a3      	str	r3, [r4, #8]
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	441e      	add	r6, r3
 8005810:	6026      	str	r6, [r4, #0]
 8005812:	2000      	movs	r0, #0
 8005814:	e7dc      	b.n	80057d0 <__ssputs_r+0x58>
 8005816:	462a      	mov	r2, r5
 8005818:	f000 fb54 	bl	8005ec4 <_realloc_r>
 800581c:	4606      	mov	r6, r0
 800581e:	2800      	cmp	r0, #0
 8005820:	d1e2      	bne.n	80057e8 <__ssputs_r+0x70>
 8005822:	6921      	ldr	r1, [r4, #16]
 8005824:	4650      	mov	r0, sl
 8005826:	f000 faa5 	bl	8005d74 <_free_r>
 800582a:	e7c8      	b.n	80057be <__ssputs_r+0x46>

0800582c <_svfiprintf_r>:
 800582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	461d      	mov	r5, r3
 8005832:	898b      	ldrh	r3, [r1, #12]
 8005834:	061f      	lsls	r7, r3, #24
 8005836:	b09d      	sub	sp, #116	; 0x74
 8005838:	4680      	mov	r8, r0
 800583a:	460c      	mov	r4, r1
 800583c:	4616      	mov	r6, r2
 800583e:	d50f      	bpl.n	8005860 <_svfiprintf_r+0x34>
 8005840:	690b      	ldr	r3, [r1, #16]
 8005842:	b96b      	cbnz	r3, 8005860 <_svfiprintf_r+0x34>
 8005844:	2140      	movs	r1, #64	; 0x40
 8005846:	f000 fae3 	bl	8005e10 <_malloc_r>
 800584a:	6020      	str	r0, [r4, #0]
 800584c:	6120      	str	r0, [r4, #16]
 800584e:	b928      	cbnz	r0, 800585c <_svfiprintf_r+0x30>
 8005850:	230c      	movs	r3, #12
 8005852:	f8c8 3000 	str.w	r3, [r8]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	e0c8      	b.n	80059ee <_svfiprintf_r+0x1c2>
 800585c:	2340      	movs	r3, #64	; 0x40
 800585e:	6163      	str	r3, [r4, #20]
 8005860:	2300      	movs	r3, #0
 8005862:	9309      	str	r3, [sp, #36]	; 0x24
 8005864:	2320      	movs	r3, #32
 8005866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800586a:	2330      	movs	r3, #48	; 0x30
 800586c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005870:	9503      	str	r5, [sp, #12]
 8005872:	f04f 0b01 	mov.w	fp, #1
 8005876:	4637      	mov	r7, r6
 8005878:	463d      	mov	r5, r7
 800587a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800587e:	b10b      	cbz	r3, 8005884 <_svfiprintf_r+0x58>
 8005880:	2b25      	cmp	r3, #37	; 0x25
 8005882:	d13e      	bne.n	8005902 <_svfiprintf_r+0xd6>
 8005884:	ebb7 0a06 	subs.w	sl, r7, r6
 8005888:	d00b      	beq.n	80058a2 <_svfiprintf_r+0x76>
 800588a:	4653      	mov	r3, sl
 800588c:	4632      	mov	r2, r6
 800588e:	4621      	mov	r1, r4
 8005890:	4640      	mov	r0, r8
 8005892:	f7ff ff71 	bl	8005778 <__ssputs_r>
 8005896:	3001      	adds	r0, #1
 8005898:	f000 80a4 	beq.w	80059e4 <_svfiprintf_r+0x1b8>
 800589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589e:	4453      	add	r3, sl
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	783b      	ldrb	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 809d 	beq.w	80059e4 <_svfiprintf_r+0x1b8>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058bc:	931a      	str	r3, [sp, #104]	; 0x68
 80058be:	462f      	mov	r7, r5
 80058c0:	2205      	movs	r2, #5
 80058c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80058c6:	4850      	ldr	r0, [pc, #320]	; (8005a08 <_svfiprintf_r+0x1dc>)
 80058c8:	f7fa fc92 	bl	80001f0 <memchr>
 80058cc:	9b04      	ldr	r3, [sp, #16]
 80058ce:	b9d0      	cbnz	r0, 8005906 <_svfiprintf_r+0xda>
 80058d0:	06d9      	lsls	r1, r3, #27
 80058d2:	bf44      	itt	mi
 80058d4:	2220      	movmi	r2, #32
 80058d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058da:	071a      	lsls	r2, r3, #28
 80058dc:	bf44      	itt	mi
 80058de:	222b      	movmi	r2, #43	; 0x2b
 80058e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058e4:	782a      	ldrb	r2, [r5, #0]
 80058e6:	2a2a      	cmp	r2, #42	; 0x2a
 80058e8:	d015      	beq.n	8005916 <_svfiprintf_r+0xea>
 80058ea:	9a07      	ldr	r2, [sp, #28]
 80058ec:	462f      	mov	r7, r5
 80058ee:	2000      	movs	r0, #0
 80058f0:	250a      	movs	r5, #10
 80058f2:	4639      	mov	r1, r7
 80058f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058f8:	3b30      	subs	r3, #48	; 0x30
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d94d      	bls.n	800599a <_svfiprintf_r+0x16e>
 80058fe:	b1b8      	cbz	r0, 8005930 <_svfiprintf_r+0x104>
 8005900:	e00f      	b.n	8005922 <_svfiprintf_r+0xf6>
 8005902:	462f      	mov	r7, r5
 8005904:	e7b8      	b.n	8005878 <_svfiprintf_r+0x4c>
 8005906:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <_svfiprintf_r+0x1dc>)
 8005908:	1a80      	subs	r0, r0, r2
 800590a:	fa0b f000 	lsl.w	r0, fp, r0
 800590e:	4318      	orrs	r0, r3
 8005910:	9004      	str	r0, [sp, #16]
 8005912:	463d      	mov	r5, r7
 8005914:	e7d3      	b.n	80058be <_svfiprintf_r+0x92>
 8005916:	9a03      	ldr	r2, [sp, #12]
 8005918:	1d11      	adds	r1, r2, #4
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	9103      	str	r1, [sp, #12]
 800591e:	2a00      	cmp	r2, #0
 8005920:	db01      	blt.n	8005926 <_svfiprintf_r+0xfa>
 8005922:	9207      	str	r2, [sp, #28]
 8005924:	e004      	b.n	8005930 <_svfiprintf_r+0x104>
 8005926:	4252      	negs	r2, r2
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	9207      	str	r2, [sp, #28]
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	783b      	ldrb	r3, [r7, #0]
 8005932:	2b2e      	cmp	r3, #46	; 0x2e
 8005934:	d10c      	bne.n	8005950 <_svfiprintf_r+0x124>
 8005936:	787b      	ldrb	r3, [r7, #1]
 8005938:	2b2a      	cmp	r3, #42	; 0x2a
 800593a:	d133      	bne.n	80059a4 <_svfiprintf_r+0x178>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	9203      	str	r2, [sp, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfb8      	it	lt
 8005948:	f04f 33ff 	movlt.w	r3, #4294967295
 800594c:	3702      	adds	r7, #2
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	4d2e      	ldr	r5, [pc, #184]	; (8005a0c <_svfiprintf_r+0x1e0>)
 8005952:	7839      	ldrb	r1, [r7, #0]
 8005954:	2203      	movs	r2, #3
 8005956:	4628      	mov	r0, r5
 8005958:	f7fa fc4a 	bl	80001f0 <memchr>
 800595c:	b138      	cbz	r0, 800596e <_svfiprintf_r+0x142>
 800595e:	2340      	movs	r3, #64	; 0x40
 8005960:	1b40      	subs	r0, r0, r5
 8005962:	fa03 f000 	lsl.w	r0, r3, r0
 8005966:	9b04      	ldr	r3, [sp, #16]
 8005968:	4303      	orrs	r3, r0
 800596a:	3701      	adds	r7, #1
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	7839      	ldrb	r1, [r7, #0]
 8005970:	4827      	ldr	r0, [pc, #156]	; (8005a10 <_svfiprintf_r+0x1e4>)
 8005972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005976:	2206      	movs	r2, #6
 8005978:	1c7e      	adds	r6, r7, #1
 800597a:	f7fa fc39 	bl	80001f0 <memchr>
 800597e:	2800      	cmp	r0, #0
 8005980:	d038      	beq.n	80059f4 <_svfiprintf_r+0x1c8>
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <_svfiprintf_r+0x1e8>)
 8005984:	bb13      	cbnz	r3, 80059cc <_svfiprintf_r+0x1a0>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	3307      	adds	r3, #7
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	3308      	adds	r3, #8
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005994:	444b      	add	r3, r9
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	e76d      	b.n	8005876 <_svfiprintf_r+0x4a>
 800599a:	fb05 3202 	mla	r2, r5, r2, r3
 800599e:	2001      	movs	r0, #1
 80059a0:	460f      	mov	r7, r1
 80059a2:	e7a6      	b.n	80058f2 <_svfiprintf_r+0xc6>
 80059a4:	2300      	movs	r3, #0
 80059a6:	3701      	adds	r7, #1
 80059a8:	9305      	str	r3, [sp, #20]
 80059aa:	4619      	mov	r1, r3
 80059ac:	250a      	movs	r5, #10
 80059ae:	4638      	mov	r0, r7
 80059b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059b4:	3a30      	subs	r2, #48	; 0x30
 80059b6:	2a09      	cmp	r2, #9
 80059b8:	d903      	bls.n	80059c2 <_svfiprintf_r+0x196>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0c8      	beq.n	8005950 <_svfiprintf_r+0x124>
 80059be:	9105      	str	r1, [sp, #20]
 80059c0:	e7c6      	b.n	8005950 <_svfiprintf_r+0x124>
 80059c2:	fb05 2101 	mla	r1, r5, r1, r2
 80059c6:	2301      	movs	r3, #1
 80059c8:	4607      	mov	r7, r0
 80059ca:	e7f0      	b.n	80059ae <_svfiprintf_r+0x182>
 80059cc:	ab03      	add	r3, sp, #12
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	4622      	mov	r2, r4
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <_svfiprintf_r+0x1ec>)
 80059d4:	a904      	add	r1, sp, #16
 80059d6:	4640      	mov	r0, r8
 80059d8:	f3af 8000 	nop.w
 80059dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059e0:	4681      	mov	r9, r0
 80059e2:	d1d6      	bne.n	8005992 <_svfiprintf_r+0x166>
 80059e4:	89a3      	ldrh	r3, [r4, #12]
 80059e6:	065b      	lsls	r3, r3, #25
 80059e8:	f53f af35 	bmi.w	8005856 <_svfiprintf_r+0x2a>
 80059ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ee:	b01d      	add	sp, #116	; 0x74
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	ab03      	add	r3, sp, #12
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	4622      	mov	r2, r4
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <_svfiprintf_r+0x1ec>)
 80059fc:	a904      	add	r1, sp, #16
 80059fe:	4640      	mov	r0, r8
 8005a00:	f000 f882 	bl	8005b08 <_printf_i>
 8005a04:	e7ea      	b.n	80059dc <_svfiprintf_r+0x1b0>
 8005a06:	bf00      	nop
 8005a08:	08006058 	.word	0x08006058
 8005a0c:	0800605e 	.word	0x0800605e
 8005a10:	08006062 	.word	0x08006062
 8005a14:	00000000 	.word	0x00000000
 8005a18:	08005779 	.word	0x08005779

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4691      	mov	r9, r2
 8005a22:	461f      	mov	r7, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	f8c9 3000 	str.w	r3, [r9]
 8005a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	b112      	cbz	r2, 8005a46 <_printf_common+0x2a>
 8005a40:	3301      	adds	r3, #1
 8005a42:	f8c9 3000 	str.w	r3, [r9]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a50:	3302      	addmi	r3, #2
 8005a52:	f8c9 3000 	strmi.w	r3, [r9]
 8005a56:	6825      	ldr	r5, [r4, #0]
 8005a58:	f015 0506 	ands.w	r5, r5, #6
 8005a5c:	d107      	bne.n	8005a6e <_printf_common+0x52>
 8005a5e:	f104 0a19 	add.w	sl, r4, #25
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	f8d9 2000 	ldr.w	r2, [r9]
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	42ab      	cmp	r3, r5
 8005a6c:	dc28      	bgt.n	8005ac0 <_printf_common+0xa4>
 8005a6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a72:	6822      	ldr	r2, [r4, #0]
 8005a74:	3300      	adds	r3, #0
 8005a76:	bf18      	it	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	0692      	lsls	r2, r2, #26
 8005a7c:	d42d      	bmi.n	8005ada <_printf_common+0xbe>
 8005a7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a82:	4639      	mov	r1, r7
 8005a84:	4630      	mov	r0, r6
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d020      	beq.n	8005ace <_printf_common+0xb2>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	68e5      	ldr	r5, [r4, #12]
 8005a90:	f8d9 2000 	ldr.w	r2, [r9]
 8005a94:	f003 0306 	and.w	r3, r3, #6
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	bf08      	it	eq
 8005a9c:	1aad      	subeq	r5, r5, r2
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	bf0c      	ite	eq
 8005aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa8:	2500      	movne	r5, #0
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bfc4      	itt	gt
 8005aae:	1a9b      	subgt	r3, r3, r2
 8005ab0:	18ed      	addgt	r5, r5, r3
 8005ab2:	f04f 0900 	mov.w	r9, #0
 8005ab6:	341a      	adds	r4, #26
 8005ab8:	454d      	cmp	r5, r9
 8005aba:	d11a      	bne.n	8005af2 <_printf_common+0xd6>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e008      	b.n	8005ad2 <_printf_common+0xb6>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	47c0      	blx	r8
 8005aca:	3001      	adds	r0, #1
 8005acc:	d103      	bne.n	8005ad6 <_printf_common+0xba>
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	e7c3      	b.n	8005a62 <_printf_common+0x46>
 8005ada:	18e1      	adds	r1, r4, r3
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	2030      	movs	r0, #48	; 0x30
 8005ae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae4:	4422      	add	r2, r4
 8005ae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aee:	3302      	adds	r3, #2
 8005af0:	e7c5      	b.n	8005a7e <_printf_common+0x62>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4622      	mov	r2, r4
 8005af6:	4639      	mov	r1, r7
 8005af8:	4630      	mov	r0, r6
 8005afa:	47c0      	blx	r8
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0e6      	beq.n	8005ace <_printf_common+0xb2>
 8005b00:	f109 0901 	add.w	r9, r9, #1
 8005b04:	e7d8      	b.n	8005ab8 <_printf_common+0x9c>
	...

08005b08 <_printf_i>:
 8005b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b10:	460c      	mov	r4, r1
 8005b12:	7e09      	ldrb	r1, [r1, #24]
 8005b14:	b085      	sub	sp, #20
 8005b16:	296e      	cmp	r1, #110	; 0x6e
 8005b18:	4617      	mov	r7, r2
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	4698      	mov	r8, r3
 8005b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b20:	f000 80b3 	beq.w	8005c8a <_printf_i+0x182>
 8005b24:	d822      	bhi.n	8005b6c <_printf_i+0x64>
 8005b26:	2963      	cmp	r1, #99	; 0x63
 8005b28:	d036      	beq.n	8005b98 <_printf_i+0x90>
 8005b2a:	d80a      	bhi.n	8005b42 <_printf_i+0x3a>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	f000 80b9 	beq.w	8005ca4 <_printf_i+0x19c>
 8005b32:	2958      	cmp	r1, #88	; 0x58
 8005b34:	f000 8083 	beq.w	8005c3e <_printf_i+0x136>
 8005b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b40:	e032      	b.n	8005ba8 <_printf_i+0xa0>
 8005b42:	2964      	cmp	r1, #100	; 0x64
 8005b44:	d001      	beq.n	8005b4a <_printf_i+0x42>
 8005b46:	2969      	cmp	r1, #105	; 0x69
 8005b48:	d1f6      	bne.n	8005b38 <_printf_i+0x30>
 8005b4a:	6820      	ldr	r0, [r4, #0]
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	0605      	lsls	r5, r0, #24
 8005b50:	f103 0104 	add.w	r1, r3, #4
 8005b54:	d52a      	bpl.n	8005bac <_printf_i+0xa4>
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6011      	str	r1, [r2, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da03      	bge.n	8005b66 <_printf_i+0x5e>
 8005b5e:	222d      	movs	r2, #45	; 0x2d
 8005b60:	425b      	negs	r3, r3
 8005b62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b66:	486f      	ldr	r0, [pc, #444]	; (8005d24 <_printf_i+0x21c>)
 8005b68:	220a      	movs	r2, #10
 8005b6a:	e039      	b.n	8005be0 <_printf_i+0xd8>
 8005b6c:	2973      	cmp	r1, #115	; 0x73
 8005b6e:	f000 809d 	beq.w	8005cac <_printf_i+0x1a4>
 8005b72:	d808      	bhi.n	8005b86 <_printf_i+0x7e>
 8005b74:	296f      	cmp	r1, #111	; 0x6f
 8005b76:	d020      	beq.n	8005bba <_printf_i+0xb2>
 8005b78:	2970      	cmp	r1, #112	; 0x70
 8005b7a:	d1dd      	bne.n	8005b38 <_printf_i+0x30>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	f043 0320 	orr.w	r3, r3, #32
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	e003      	b.n	8005b8e <_printf_i+0x86>
 8005b86:	2975      	cmp	r1, #117	; 0x75
 8005b88:	d017      	beq.n	8005bba <_printf_i+0xb2>
 8005b8a:	2978      	cmp	r1, #120	; 0x78
 8005b8c:	d1d4      	bne.n	8005b38 <_printf_i+0x30>
 8005b8e:	2378      	movs	r3, #120	; 0x78
 8005b90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b94:	4864      	ldr	r0, [pc, #400]	; (8005d28 <_printf_i+0x220>)
 8005b96:	e055      	b.n	8005c44 <_printf_i+0x13c>
 8005b98:	6813      	ldr	r3, [r2, #0]
 8005b9a:	1d19      	adds	r1, r3, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6011      	str	r1, [r2, #0]
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e08c      	b.n	8005cc6 <_printf_i+0x1be>
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6011      	str	r1, [r2, #0]
 8005bb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bb4:	bf18      	it	ne
 8005bb6:	b21b      	sxthne	r3, r3
 8005bb8:	e7cf      	b.n	8005b5a <_printf_i+0x52>
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	6825      	ldr	r5, [r4, #0]
 8005bbe:	1d18      	adds	r0, r3, #4
 8005bc0:	6010      	str	r0, [r2, #0]
 8005bc2:	0628      	lsls	r0, r5, #24
 8005bc4:	d501      	bpl.n	8005bca <_printf_i+0xc2>
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	e002      	b.n	8005bd0 <_printf_i+0xc8>
 8005bca:	0668      	lsls	r0, r5, #25
 8005bcc:	d5fb      	bpl.n	8005bc6 <_printf_i+0xbe>
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	4854      	ldr	r0, [pc, #336]	; (8005d24 <_printf_i+0x21c>)
 8005bd2:	296f      	cmp	r1, #111	; 0x6f
 8005bd4:	bf14      	ite	ne
 8005bd6:	220a      	movne	r2, #10
 8005bd8:	2208      	moveq	r2, #8
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005be0:	6865      	ldr	r5, [r4, #4]
 8005be2:	60a5      	str	r5, [r4, #8]
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	f2c0 8095 	blt.w	8005d14 <_printf_i+0x20c>
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	f021 0104 	bic.w	r1, r1, #4
 8005bf0:	6021      	str	r1, [r4, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d13d      	bne.n	8005c72 <_printf_i+0x16a>
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	f040 808e 	bne.w	8005d18 <_printf_i+0x210>
 8005bfc:	4665      	mov	r5, ip
 8005bfe:	2a08      	cmp	r2, #8
 8005c00:	d10b      	bne.n	8005c1a <_printf_i+0x112>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	07db      	lsls	r3, r3, #31
 8005c06:	d508      	bpl.n	8005c1a <_printf_i+0x112>
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	bfde      	ittt	le
 8005c10:	2330      	movle	r3, #48	; 0x30
 8005c12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c1a:	ebac 0305 	sub.w	r3, ip, r5
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	f8cd 8000 	str.w	r8, [sp]
 8005c24:	463b      	mov	r3, r7
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff fef6 	bl	8005a1c <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14d      	bne.n	8005cd0 <_printf_i+0x1c8>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b005      	add	sp, #20
 8005c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c3e:	4839      	ldr	r0, [pc, #228]	; (8005d24 <_printf_i+0x21c>)
 8005c40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	1d1d      	adds	r5, r3, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6015      	str	r5, [r2, #0]
 8005c4e:	060a      	lsls	r2, r1, #24
 8005c50:	d50b      	bpl.n	8005c6a <_printf_i+0x162>
 8005c52:	07ca      	lsls	r2, r1, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f041 0120 	orrmi.w	r1, r1, #32
 8005c5a:	6021      	strmi	r1, [r4, #0]
 8005c5c:	b91b      	cbnz	r3, 8005c66 <_printf_i+0x15e>
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	f022 0220 	bic.w	r2, r2, #32
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	e7b7      	b.n	8005bda <_printf_i+0xd2>
 8005c6a:	064d      	lsls	r5, r1, #25
 8005c6c:	bf48      	it	mi
 8005c6e:	b29b      	uxthmi	r3, r3
 8005c70:	e7ef      	b.n	8005c52 <_printf_i+0x14a>
 8005c72:	4665      	mov	r5, ip
 8005c74:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c78:	fb02 3311 	mls	r3, r2, r1, r3
 8005c7c:	5cc3      	ldrb	r3, [r0, r3]
 8005c7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c82:	460b      	mov	r3, r1
 8005c84:	2900      	cmp	r1, #0
 8005c86:	d1f5      	bne.n	8005c74 <_printf_i+0x16c>
 8005c88:	e7b9      	b.n	8005bfe <_printf_i+0xf6>
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	6961      	ldr	r1, [r4, #20]
 8005c90:	1d18      	adds	r0, r3, #4
 8005c92:	6010      	str	r0, [r2, #0]
 8005c94:	0628      	lsls	r0, r5, #24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	d501      	bpl.n	8005c9e <_printf_i+0x196>
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <_printf_i+0x19c>
 8005c9e:	066a      	lsls	r2, r5, #25
 8005ca0:	d5fb      	bpl.n	8005c9a <_printf_i+0x192>
 8005ca2:	8019      	strh	r1, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	4665      	mov	r5, ip
 8005caa:	e7b9      	b.n	8005c20 <_printf_i+0x118>
 8005cac:	6813      	ldr	r3, [r2, #0]
 8005cae:	1d19      	adds	r1, r3, #4
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	681d      	ldr	r5, [r3, #0]
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f7fa fa99 	bl	80001f0 <memchr>
 8005cbe:	b108      	cbz	r0, 8005cc4 <_printf_i+0x1bc>
 8005cc0:	1b40      	subs	r0, r0, r5
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cce:	e7a7      	b.n	8005c20 <_printf_i+0x118>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	47c0      	blx	r8
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d0aa      	beq.n	8005c34 <_printf_i+0x12c>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	079b      	lsls	r3, r3, #30
 8005ce2:	d413      	bmi.n	8005d0c <_printf_i+0x204>
 8005ce4:	68e0      	ldr	r0, [r4, #12]
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	bfb8      	it	lt
 8005cec:	4618      	movlt	r0, r3
 8005cee:	e7a3      	b.n	8005c38 <_printf_i+0x130>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	464a      	mov	r2, r9
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	47c0      	blx	r8
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d09a      	beq.n	8005c34 <_printf_i+0x12c>
 8005cfe:	3501      	adds	r5, #1
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	9a03      	ldr	r2, [sp, #12]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	42ab      	cmp	r3, r5
 8005d08:	dcf2      	bgt.n	8005cf0 <_printf_i+0x1e8>
 8005d0a:	e7eb      	b.n	8005ce4 <_printf_i+0x1dc>
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	f104 0919 	add.w	r9, r4, #25
 8005d12:	e7f5      	b.n	8005d00 <_printf_i+0x1f8>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ac      	bne.n	8005c72 <_printf_i+0x16a>
 8005d18:	7803      	ldrb	r3, [r0, #0]
 8005d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d22:	e76c      	b.n	8005bfe <_printf_i+0xf6>
 8005d24:	08006069 	.word	0x08006069
 8005d28:	0800607a 	.word	0x0800607a

08005d2c <memcpy>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	1e43      	subs	r3, r0, #1
 8005d30:	440a      	add	r2, r1
 8005d32:	4291      	cmp	r1, r2
 8005d34:	d100      	bne.n	8005d38 <memcpy+0xc>
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d40:	e7f7      	b.n	8005d32 <memcpy+0x6>

08005d42 <memmove>:
 8005d42:	4288      	cmp	r0, r1
 8005d44:	b510      	push	{r4, lr}
 8005d46:	eb01 0302 	add.w	r3, r1, r2
 8005d4a:	d807      	bhi.n	8005d5c <memmove+0x1a>
 8005d4c:	1e42      	subs	r2, r0, #1
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	d00a      	beq.n	8005d68 <memmove+0x26>
 8005d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d5a:	e7f8      	b.n	8005d4e <memmove+0xc>
 8005d5c:	4283      	cmp	r3, r0
 8005d5e:	d9f5      	bls.n	8005d4c <memmove+0xa>
 8005d60:	1881      	adds	r1, r0, r2
 8005d62:	1ad2      	subs	r2, r2, r3
 8005d64:	42d3      	cmn	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memmove+0x28>
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d72:	e7f7      	b.n	8005d64 <memmove+0x22>

08005d74 <_free_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4605      	mov	r5, r0
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	d045      	beq.n	8005e08 <_free_r+0x94>
 8005d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d80:	1f0c      	subs	r4, r1, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfb8      	it	lt
 8005d86:	18e4      	addlt	r4, r4, r3
 8005d88:	f000 f8d2 	bl	8005f30 <__malloc_lock>
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <_free_r+0x98>)
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	4610      	mov	r0, r2
 8005d92:	b933      	cbnz	r3, 8005da2 <_free_r+0x2e>
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6014      	str	r4, [r2, #0]
 8005d98:	4628      	mov	r0, r5
 8005d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d9e:	f000 b8c8 	b.w	8005f32 <__malloc_unlock>
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	d90c      	bls.n	8005dc0 <_free_r+0x4c>
 8005da6:	6821      	ldr	r1, [r4, #0]
 8005da8:	1862      	adds	r2, r4, r1
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bf04      	itt	eq
 8005dae:	681a      	ldreq	r2, [r3, #0]
 8005db0:	685b      	ldreq	r3, [r3, #4]
 8005db2:	6063      	str	r3, [r4, #4]
 8005db4:	bf04      	itt	eq
 8005db6:	1852      	addeq	r2, r2, r1
 8005db8:	6022      	streq	r2, [r4, #0]
 8005dba:	6004      	str	r4, [r0, #0]
 8005dbc:	e7ec      	b.n	8005d98 <_free_r+0x24>
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	b10a      	cbz	r2, 8005dc8 <_free_r+0x54>
 8005dc4:	42a2      	cmp	r2, r4
 8005dc6:	d9fa      	bls.n	8005dbe <_free_r+0x4a>
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	1858      	adds	r0, r3, r1
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	d10b      	bne.n	8005de8 <_free_r+0x74>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	4401      	add	r1, r0
 8005dd4:	1858      	adds	r0, r3, r1
 8005dd6:	4282      	cmp	r2, r0
 8005dd8:	6019      	str	r1, [r3, #0]
 8005dda:	d1dd      	bne.n	8005d98 <_free_r+0x24>
 8005ddc:	6810      	ldr	r0, [r2, #0]
 8005dde:	6852      	ldr	r2, [r2, #4]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	4401      	add	r1, r0
 8005de4:	6019      	str	r1, [r3, #0]
 8005de6:	e7d7      	b.n	8005d98 <_free_r+0x24>
 8005de8:	d902      	bls.n	8005df0 <_free_r+0x7c>
 8005dea:	230c      	movs	r3, #12
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	e7d3      	b.n	8005d98 <_free_r+0x24>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	1821      	adds	r1, r4, r0
 8005df4:	428a      	cmp	r2, r1
 8005df6:	bf04      	itt	eq
 8005df8:	6811      	ldreq	r1, [r2, #0]
 8005dfa:	6852      	ldreq	r2, [r2, #4]
 8005dfc:	6062      	str	r2, [r4, #4]
 8005dfe:	bf04      	itt	eq
 8005e00:	1809      	addeq	r1, r1, r0
 8005e02:	6021      	streq	r1, [r4, #0]
 8005e04:	605c      	str	r4, [r3, #4]
 8005e06:	e7c7      	b.n	8005d98 <_free_r+0x24>
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200000d8 	.word	0x200000d8

08005e10 <_malloc_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	1ccd      	adds	r5, r1, #3
 8005e14:	f025 0503 	bic.w	r5, r5, #3
 8005e18:	3508      	adds	r5, #8
 8005e1a:	2d0c      	cmp	r5, #12
 8005e1c:	bf38      	it	cc
 8005e1e:	250c      	movcc	r5, #12
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	4606      	mov	r6, r0
 8005e24:	db01      	blt.n	8005e2a <_malloc_r+0x1a>
 8005e26:	42a9      	cmp	r1, r5
 8005e28:	d903      	bls.n	8005e32 <_malloc_r+0x22>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	2000      	movs	r0, #0
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	f000 f87d 	bl	8005f30 <__malloc_lock>
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <_malloc_r+0xac>)
 8005e38:	6814      	ldr	r4, [r2, #0]
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	b991      	cbnz	r1, 8005e64 <_malloc_r+0x54>
 8005e3e:	4c20      	ldr	r4, [pc, #128]	; (8005ec0 <_malloc_r+0xb0>)
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	b91b      	cbnz	r3, 8005e4c <_malloc_r+0x3c>
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 f863 	bl	8005f10 <_sbrk_r>
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f000 f85e 	bl	8005f10 <_sbrk_r>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d124      	bne.n	8005ea2 <_malloc_r+0x92>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	6033      	str	r3, [r6, #0]
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 f868 	bl	8005f32 <__malloc_unlock>
 8005e62:	e7e4      	b.n	8005e2e <_malloc_r+0x1e>
 8005e64:	680b      	ldr	r3, [r1, #0]
 8005e66:	1b5b      	subs	r3, r3, r5
 8005e68:	d418      	bmi.n	8005e9c <_malloc_r+0x8c>
 8005e6a:	2b0b      	cmp	r3, #11
 8005e6c:	d90f      	bls.n	8005e8e <_malloc_r+0x7e>
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	50cd      	str	r5, [r1, r3]
 8005e72:	18cc      	adds	r4, r1, r3
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 f85c 	bl	8005f32 <__malloc_unlock>
 8005e7a:	f104 000b 	add.w	r0, r4, #11
 8005e7e:	1d23      	adds	r3, r4, #4
 8005e80:	f020 0007 	bic.w	r0, r0, #7
 8005e84:	1ac3      	subs	r3, r0, r3
 8005e86:	d0d3      	beq.n	8005e30 <_malloc_r+0x20>
 8005e88:	425a      	negs	r2, r3
 8005e8a:	50e2      	str	r2, [r4, r3]
 8005e8c:	e7d0      	b.n	8005e30 <_malloc_r+0x20>
 8005e8e:	428c      	cmp	r4, r1
 8005e90:	684b      	ldr	r3, [r1, #4]
 8005e92:	bf16      	itet	ne
 8005e94:	6063      	strne	r3, [r4, #4]
 8005e96:	6013      	streq	r3, [r2, #0]
 8005e98:	460c      	movne	r4, r1
 8005e9a:	e7eb      	b.n	8005e74 <_malloc_r+0x64>
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	6849      	ldr	r1, [r1, #4]
 8005ea0:	e7cc      	b.n	8005e3c <_malloc_r+0x2c>
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d005      	beq.n	8005eb8 <_malloc_r+0xa8>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f82e 	bl	8005f10 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0cf      	beq.n	8005e58 <_malloc_r+0x48>
 8005eb8:	6025      	str	r5, [r4, #0]
 8005eba:	e7db      	b.n	8005e74 <_malloc_r+0x64>
 8005ebc:	200000d8 	.word	0x200000d8
 8005ec0:	200000dc 	.word	0x200000dc

08005ec4 <_realloc_r>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	4614      	mov	r4, r2
 8005eca:	460e      	mov	r6, r1
 8005ecc:	b921      	cbnz	r1, 8005ed8 <_realloc_r+0x14>
 8005ece:	4611      	mov	r1, r2
 8005ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ed4:	f7ff bf9c 	b.w	8005e10 <_malloc_r>
 8005ed8:	b922      	cbnz	r2, 8005ee4 <_realloc_r+0x20>
 8005eda:	f7ff ff4b 	bl	8005d74 <_free_r>
 8005ede:	4625      	mov	r5, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee4:	f000 f826 	bl	8005f34 <_malloc_usable_size_r>
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d20f      	bcs.n	8005f0c <_realloc_r+0x48>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f7ff ff8e 	bl	8005e10 <_malloc_r>
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d0f2      	beq.n	8005ee0 <_realloc_r+0x1c>
 8005efa:	4631      	mov	r1, r6
 8005efc:	4622      	mov	r2, r4
 8005efe:	f7ff ff15 	bl	8005d2c <memcpy>
 8005f02:	4631      	mov	r1, r6
 8005f04:	4638      	mov	r0, r7
 8005f06:	f7ff ff35 	bl	8005d74 <_free_r>
 8005f0a:	e7e9      	b.n	8005ee0 <_realloc_r+0x1c>
 8005f0c:	4635      	mov	r5, r6
 8005f0e:	e7e7      	b.n	8005ee0 <_realloc_r+0x1c>

08005f10 <_sbrk_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4c06      	ldr	r4, [pc, #24]	; (8005f2c <_sbrk_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4605      	mov	r5, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	f7ff fb4e 	bl	80055bc <_sbrk>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_sbrk_r+0x1a>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_sbrk_r+0x1a>
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200003c0 	.word	0x200003c0

08005f30 <__malloc_lock>:
 8005f30:	4770      	bx	lr

08005f32 <__malloc_unlock>:
 8005f32:	4770      	bx	lr

08005f34 <_malloc_usable_size_r>:
 8005f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f38:	1f18      	subs	r0, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bfbc      	itt	lt
 8005f3e:	580b      	ldrlt	r3, [r1, r0]
 8005f40:	18c0      	addlt	r0, r0, r3
 8005f42:	4770      	bx	lr

08005f44 <_init>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr

08005f50 <_fini>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr
